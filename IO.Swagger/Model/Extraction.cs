/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
	/// <summary>
	/// Extraction
	/// </summary>
	[DataContract]
	public partial class Extraction :  IEquatable<Extraction>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Extraction" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected Extraction() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="Extraction" /> class.
		/// </summary>
		/// <param name="OrganizationId">OrganizationId (required).</param>
		/// <param name="Doctype">Doctype (required).</param>
		/// <param name="ExtractionTemplateId">ExtractionTemplateId (required).</param>
		/// <param name="Kind">Kind (required).</param>
		/// <param name="Type">Type (required).</param>
		/// <param name="DisplayName">DisplayName (required).</param>
		/// <param name="IsTraining">IsTraining (default to false).</param>
		/// <param name="ValidatedDocsCount">ValidatedDocsCount (default to 0.0).</param>
		/// <param name="TrainedDocsCount">TrainedDocsCount (default to 0.0).</param>
		/// <param name="ValidationTemplates">ValidationTemplates.</param>
		/// <param name="Segments">Segments.</param>
		/// <param name="Id">Id.</param>
		/// <param name="CreatedAt">CreatedAt (required).</param>
		/// <param name="UpdatedAt">UpdatedAt (required).</param>
		public Extraction(ObjectID OrganizationId = default(ObjectID), Object Doctype = default(Object), ObjectID ExtractionTemplateId = default(ObjectID), string Kind = default(string), string Type = default(string), string DisplayName = default(string), bool? IsTraining = false, double? ValidatedDocsCount = 0.0, double? TrainedDocsCount = 0.0, List<object> ValidationTemplates = default(List<object>), List<Object> Segments = default(List<Object>), ObjectID Id = default(ObjectID), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
		{
			// to ensure "OrganizationId" is required (not null)
			if (OrganizationId == null)
			{
				throw new InvalidDataException("OrganizationId is a required property for Extraction and cannot be null");
			}
			else
			{
				this.OrganizationId = OrganizationId;
			}
			// to ensure "Doctype" is required (not null)
			if (Doctype == null)
			{
				throw new InvalidDataException("Doctype is a required property for Extraction and cannot be null");
			}
			else
			{
				this.Doctype = Doctype;
			}
			// to ensure "ExtractionTemplateId" is required (not null)
			if (ExtractionTemplateId == null)
			{
				throw new InvalidDataException("ExtractionTemplateId is a required property for Extraction and cannot be null");
			}
			else
			{
				this.ExtractionTemplateId = ExtractionTemplateId;
			}
			// to ensure "Kind" is required (not null)
			if (Kind == null)
			{
				throw new InvalidDataException("Kind is a required property for Extraction and cannot be null");
			}
			else
			{
				this.Kind = Kind;
			}
			// to ensure "Type" is required (not null)
			if (Type == null)
			{
				throw new InvalidDataException("Type is a required property for Extraction and cannot be null");
			}
			else
			{
				this.Type = Type;
			}
			// to ensure "DisplayName" is required (not null)
			if (DisplayName == null)
			{
				throw new InvalidDataException("DisplayName is a required property for Extraction and cannot be null");
			}
			else
			{
				this.DisplayName = DisplayName;
			}
			// to ensure "CreatedAt" is required (not null)
			if (CreatedAt == null)
			{
				throw new InvalidDataException("CreatedAt is a required property for Extraction and cannot be null");
			}
			else
			{
				this.CreatedAt = CreatedAt;
			}
			// to ensure "UpdatedAt" is required (not null)
			if (UpdatedAt == null)
			{
				throw new InvalidDataException("UpdatedAt is a required property for Extraction and cannot be null");
			}
			else
			{
				this.UpdatedAt = UpdatedAt;
			}
			// use default value if no "IsTraining" provided
			if (IsTraining == null)
			{
				this.IsTraining = false;
			}
			else
			{
				this.IsTraining = IsTraining;
			}
			// use default value if no "ValidatedDocsCount" provided
			if (ValidatedDocsCount == null)
			{
				this.ValidatedDocsCount = 0.0;
			}
			else
			{
				this.ValidatedDocsCount = ValidatedDocsCount;
			}
			// use default value if no "TrainedDocsCount" provided
			if (TrainedDocsCount == null)
			{
				this.TrainedDocsCount = 0.0;
			}
			else
			{
				this.TrainedDocsCount = TrainedDocsCount;
			}
			this.ValidationTemplates = ValidationTemplates;
			this.Segments = Segments;
			this.Id = Id;
		}
		
		/// <summary>
		/// Gets or Sets OrganizationId
		/// </summary>
		[DataMember(Name="organizationId", EmitDefaultValue=false)]
		public ObjectID OrganizationId { get; set; }
		/// <summary>
		/// Gets or Sets Doctype
		/// </summary>
		[DataMember(Name="doctype", EmitDefaultValue=false)]
		public Object Doctype { get; set; }
		/// <summary>
		/// Gets or Sets ExtractionTemplateId
		/// </summary>
		[DataMember(Name="extractionTemplateId", EmitDefaultValue=false)]
		public ObjectID ExtractionTemplateId { get; set; }
		/// <summary>
		/// Gets or Sets Kind
		/// </summary>
		[DataMember(Name="kind", EmitDefaultValue=false)]
		public string Kind { get; set; }
		/// <summary>
		/// Gets or Sets Type
		/// </summary>
		[DataMember(Name="type", EmitDefaultValue=false)]
		public string Type { get; set; }
		/// <summary>
		/// Gets or Sets DisplayName
		/// </summary>
		[DataMember(Name="displayName", EmitDefaultValue=false)]
		public string DisplayName { get; set; }
		/// <summary>
		/// Gets or Sets IsTraining
		/// </summary>
		[DataMember(Name="isTraining", EmitDefaultValue=false)]
		public bool? IsTraining { get; set; }
		/// <summary>
		/// Gets or Sets ValidatedDocsCount
		/// </summary>
		[DataMember(Name="validatedDocsCount", EmitDefaultValue=false)]
		public double? ValidatedDocsCount { get; set; }
		/// <summary>
		/// Gets or Sets TrainedDocsCount
		/// </summary>
		[DataMember(Name="trainedDocsCount", EmitDefaultValue=false)]
		public double? TrainedDocsCount { get; set; }
		/// <summary>
		/// Gets or Sets ValidationTemplates
		/// </summary>
		[DataMember(Name="validationTemplates", EmitDefaultValue=false)]
		public List<object> ValidationTemplates { get; set; }
		/// <summary>
		/// Gets or Sets Segments
		/// </summary>
		[DataMember(Name="segments", EmitDefaultValue=false)]
		public List<Object> Segments { get; set; }
		/// <summary>
		/// Gets or Sets Id
		/// </summary>
		[DataMember(Name="id", EmitDefaultValue=false)]
		public ObjectID Id { get; set; }
		/// <summary>
		/// Gets or Sets CreatedAt
		/// </summary>
		[DataMember(Name="createdAt", EmitDefaultValue=false)]
		public DateTime? CreatedAt { get; set; }
		/// <summary>
		/// Gets or Sets UpdatedAt
		/// </summary>
		[DataMember(Name="updatedAt", EmitDefaultValue=false)]
		public DateTime? UpdatedAt { get; set; }
		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Extraction {\n");
			sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
			sb.Append("  Doctype: ").Append(Doctype).Append("\n");
			sb.Append("  ExtractionTemplateId: ").Append(ExtractionTemplateId).Append("\n");
			sb.Append("  Kind: ").Append(Kind).Append("\n");
			sb.Append("  Type: ").Append(Type).Append("\n");
			sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
			sb.Append("  IsTraining: ").Append(IsTraining).Append("\n");
			sb.Append("  ValidatedDocsCount: ").Append(ValidatedDocsCount).Append("\n");
			sb.Append("  TrainedDocsCount: ").Append(TrainedDocsCount).Append("\n");
			sb.Append("  ValidationTemplates: ").Append(ValidationTemplates).Append("\n");
			sb.Append("  Segments: ").Append(Segments).Append("\n");
			sb.Append("  Id: ").Append(Id).Append("\n");
			sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
			sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			return this.Equals(obj as Extraction);
		}

		/// <summary>
		/// Returns true if Extraction instances are equal
		/// </summary>
		/// <param name="other">Instance of Extraction to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Extraction other)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			if (other == null)
				return false;

			return 
				(
					this.OrganizationId == other.OrganizationId ||
					this.OrganizationId != null &&
					this.OrganizationId.Equals(other.OrganizationId)
				) && 
				(
					this.Doctype == other.Doctype ||
					this.Doctype != null &&
					this.Doctype.Equals(other.Doctype)
				) && 
				(
					this.ExtractionTemplateId == other.ExtractionTemplateId ||
					this.ExtractionTemplateId != null &&
					this.ExtractionTemplateId.Equals(other.ExtractionTemplateId)
				) && 
				(
					this.Kind == other.Kind ||
					this.Kind != null &&
					this.Kind.Equals(other.Kind)
				) && 
				(
					this.Type == other.Type ||
					this.Type != null &&
					this.Type.Equals(other.Type)
				) && 
				(
					this.DisplayName == other.DisplayName ||
					this.DisplayName != null &&
					this.DisplayName.Equals(other.DisplayName)
				) && 
				(
					this.IsTraining == other.IsTraining ||
					this.IsTraining != null &&
					this.IsTraining.Equals(other.IsTraining)
				) && 
				(
					this.ValidatedDocsCount == other.ValidatedDocsCount ||
					this.ValidatedDocsCount != null &&
					this.ValidatedDocsCount.Equals(other.ValidatedDocsCount)
				) && 
				(
					this.TrainedDocsCount == other.TrainedDocsCount ||
					this.TrainedDocsCount != null &&
					this.TrainedDocsCount.Equals(other.TrainedDocsCount)
				) && 
				(
					this.ValidationTemplates == other.ValidationTemplates ||
					this.ValidationTemplates != null &&
					this.ValidationTemplates.SequenceEqual(other.ValidationTemplates)
				) && 
				(
					this.Segments == other.Segments ||
					this.Segments != null &&
					this.Segments.SequenceEqual(other.Segments)
				) && 
				(
					this.Id == other.Id ||
					this.Id != null &&
					this.Id.Equals(other.Id)
				) && 
				(
					this.CreatedAt == other.CreatedAt ||
					this.CreatedAt != null &&
					this.CreatedAt.Equals(other.CreatedAt)
				) && 
				(
					this.UpdatedAt == other.UpdatedAt ||
					this.UpdatedAt != null &&
					this.UpdatedAt.Equals(other.UpdatedAt)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if (this.OrganizationId != null)
					hash = hash * 59 + this.OrganizationId.GetHashCode();
				if (this.Doctype != null)
					hash = hash * 59 + this.Doctype.GetHashCode();
				if (this.ExtractionTemplateId != null)
					hash = hash * 59 + this.ExtractionTemplateId.GetHashCode();
				if (this.Kind != null)
					hash = hash * 59 + this.Kind.GetHashCode();
				if (this.Type != null)
					hash = hash * 59 + this.Type.GetHashCode();
				if (this.DisplayName != null)
					hash = hash * 59 + this.DisplayName.GetHashCode();
				if (this.IsTraining != null)
					hash = hash * 59 + this.IsTraining.GetHashCode();
				if (this.ValidatedDocsCount != null)
					hash = hash * 59 + this.ValidatedDocsCount.GetHashCode();
				if (this.TrainedDocsCount != null)
					hash = hash * 59 + this.TrainedDocsCount.GetHashCode();
				if (this.ValidationTemplates != null)
					hash = hash * 59 + this.ValidationTemplates.GetHashCode();
				if (this.Segments != null)
					hash = hash * 59 + this.Segments.GetHashCode();
				if (this.Id != null)
					hash = hash * 59 + this.Id.GetHashCode();
				if (this.CreatedAt != null)
					hash = hash * 59 + this.CreatedAt.GetHashCode();
				if (this.UpdatedAt != null)
					hash = hash * 59 + this.UpdatedAt.GetHashCode();
				return hash;
			}
		}

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{ 
			yield break;
		}
	}

}

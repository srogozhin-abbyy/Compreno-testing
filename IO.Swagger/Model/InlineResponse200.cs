/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
	/// <summary>
	/// InlineResponse200
	/// </summary>
	[DataContract]
	public partial class InlineResponse200 :  IEquatable<InlineResponse200>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="InlineResponse200" /> class.
		/// </summary>
		/// <param name="Undefined">Undefined.</param>
		public InlineResponse200(Object Undefined = default(Object))
		{
			this.Undefined = Undefined;
		}
		
		/// <summary>
		/// Gets or Sets Undefined
		/// </summary>
		[DataMember(Name="undefined", EmitDefaultValue=false)]
		public Object Undefined { get; set; }
		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class InlineResponse200 {\n");
			sb.Append("  Undefined: ").Append(Undefined).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			return this.Equals(obj as InlineResponse200);
		}

		/// <summary>
		/// Returns true if InlineResponse200 instances are equal
		/// </summary>
		/// <param name="other">Instance of InlineResponse200 to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(InlineResponse200 other)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			if (other == null)
				return false;

			return 
				(
					this.Undefined == other.Undefined ||
					this.Undefined != null &&
					this.Undefined.Equals(other.Undefined)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if (this.Undefined != null)
					hash = hash * 59 + this.Undefined.GetHashCode();
				return hash;
			}
		}

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{ 
			yield break;
		}
	}

}

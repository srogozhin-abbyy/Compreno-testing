/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
	/// <summary>
	/// Project
	/// </summary>
	[DataContract]
	public partial class Project :  IEquatable<Project>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="Project" /> class.
		/// </summary>
		[JsonConstructorAttribute]
		protected Project() { }
		/// <summary>
		/// Initializes a new instance of the <see cref="Project" /> class.
		/// </summary>
		/// <param name="Name">Name (required).</param>
		/// <param name="NotifyValidationOverdue">NotifyValidationOverdue (required) (default to false).</param>
		/// <param name="NotifyProcessingOverdue">NotifyProcessingOverdue (required) (default to false).</param>
		/// <param name="HoursToValidate">HoursToValidate (required) (default to 2.0).</param>
		/// <param name="HoursToNextStep">HoursToNextStep (required) (default to 2.0).</param>
		/// <param name="AssigningStrategy">AssigningStrategy (required) (default to &quot;auto&quot;).</param>
		/// <param name="HandlingStrategy">HandlingStrategy (required) (default to &quot;client&quot;).</param>
		/// <param name="ValidatorIds">ValidatorIds.</param>
		/// <param name="LastUploadDate">LastUploadDate.</param>
		/// <param name="Id">Id.</param>
		/// <param name="ManagerId">ManagerId.</param>
		/// <param name="OrganizationId">OrganizationId.</param>
		/// <param name="WorkflowId">WorkflowId.</param>
		/// <param name="CreatedAt">CreatedAt (required).</param>
		/// <param name="UpdatedAt">UpdatedAt (required).</param>
		public Project(string Name = default(string), bool? NotifyValidationOverdue = false, bool? NotifyProcessingOverdue = false, double? HoursToValidate = 2.0, double? HoursToNextStep = 2.0, string AssigningStrategy = "auto", string HandlingStrategy = "client", List<ObjectID> ValidatorIds = default(List<ObjectID>), string LastUploadDate = default(string), ObjectID Id = default(ObjectID), ObjectID ManagerId = default(ObjectID), ObjectID OrganizationId = default(ObjectID), ObjectID WorkflowId = default(ObjectID), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
		{
			// to ensure "Name" is required (not null)
			if (Name == null)
			{
				throw new InvalidDataException("Name is a required property for Project and cannot be null");
			}
			else
			{
				this.Name = Name;
			}
			// to ensure "NotifyValidationOverdue" is required (not null)
			if (NotifyValidationOverdue == null)
			{
				throw new InvalidDataException("NotifyValidationOverdue is a required property for Project and cannot be null");
			}
			else
			{
				this.NotifyValidationOverdue = NotifyValidationOverdue;
			}
			// to ensure "NotifyProcessingOverdue" is required (not null)
			if (NotifyProcessingOverdue == null)
			{
				throw new InvalidDataException("NotifyProcessingOverdue is a required property for Project and cannot be null");
			}
			else
			{
				this.NotifyProcessingOverdue = NotifyProcessingOverdue;
			}
			// to ensure "HoursToValidate" is required (not null)
			if (HoursToValidate == null)
			{
				throw new InvalidDataException("HoursToValidate is a required property for Project and cannot be null");
			}
			else
			{
				this.HoursToValidate = HoursToValidate;
			}
			// to ensure "HoursToNextStep" is required (not null)
			if (HoursToNextStep == null)
			{
				throw new InvalidDataException("HoursToNextStep is a required property for Project and cannot be null");
			}
			else
			{
				this.HoursToNextStep = HoursToNextStep;
			}
			// to ensure "AssigningStrategy" is required (not null)
			if (AssigningStrategy == null)
			{
				throw new InvalidDataException("AssigningStrategy is a required property for Project and cannot be null");
			}
			else
			{
				this.AssigningStrategy = AssigningStrategy;
			}
			// to ensure "HandlingStrategy" is required (not null)
			if (HandlingStrategy == null)
			{
				throw new InvalidDataException("HandlingStrategy is a required property for Project and cannot be null");
			}
			else
			{
				this.HandlingStrategy = HandlingStrategy;
			}
			// to ensure "CreatedAt" is required (not null)
			if (CreatedAt == null)
			{
				throw new InvalidDataException("CreatedAt is a required property for Project and cannot be null");
			}
			else
			{
				this.CreatedAt = CreatedAt;
			}
			// to ensure "UpdatedAt" is required (not null)
			if (UpdatedAt == null)
			{
				throw new InvalidDataException("UpdatedAt is a required property for Project and cannot be null");
			}
			else
			{
				this.UpdatedAt = UpdatedAt;
			}
			this.ValidatorIds = ValidatorIds;
			this.LastUploadDate = LastUploadDate;
			this.Id = Id;
			this.ManagerId = ManagerId;
			this.OrganizationId = OrganizationId;
			this.WorkflowId = WorkflowId;
		}
		
		/// <summary>
		/// Gets or Sets Name
		/// </summary>
		[DataMember(Name="name", EmitDefaultValue=false)]
		public string Name { get; set; }
		/// <summary>
		/// Gets or Sets NotifyValidationOverdue
		/// </summary>
		[DataMember(Name="notifyValidationOverdue", EmitDefaultValue=false)]
		public bool? NotifyValidationOverdue { get; set; }
		/// <summary>
		/// Gets or Sets NotifyProcessingOverdue
		/// </summary>
		[DataMember(Name="notifyProcessingOverdue", EmitDefaultValue=false)]
		public bool? NotifyProcessingOverdue { get; set; }
		/// <summary>
		/// Gets or Sets HoursToValidate
		/// </summary>
		[DataMember(Name="hoursToValidate", EmitDefaultValue=false)]
		public double? HoursToValidate { get; set; }
		/// <summary>
		/// Gets or Sets HoursToNextStep
		/// </summary>
		[DataMember(Name="hoursToNextStep", EmitDefaultValue=false)]
		public double? HoursToNextStep { get; set; }
		/// <summary>
		/// Gets or Sets AssigningStrategy
		/// </summary>
		[DataMember(Name="assigningStrategy", EmitDefaultValue=false)]
		public string AssigningStrategy { get; set; }
		/// <summary>
		/// Gets or Sets HandlingStrategy
		/// </summary>
		[DataMember(Name="handlingStrategy", EmitDefaultValue=false)]
		public string HandlingStrategy { get; set; }
		/// <summary>
		/// Gets or Sets ValidatorIds
		/// </summary>
		[DataMember(Name="validatorIds", EmitDefaultValue=false)]
		public List<ObjectID> ValidatorIds { get; set; }
		/// <summary>
		/// Gets or Sets LastUploadDate
		/// </summary>
		[DataMember(Name="lastUploadDate", EmitDefaultValue=false)]
		public string LastUploadDate { get; set; }
		/// <summary>
		/// Gets or Sets Id
		/// </summary>
		[DataMember(Name="id", EmitDefaultValue=false)]
		public ObjectID Id { get; set; }
		/// <summary>
		/// Gets or Sets ManagerId
		/// </summary>
		[DataMember(Name="managerId", EmitDefaultValue=false)]
		public ObjectID ManagerId { get; set; }
		/// <summary>
		/// Gets or Sets OrganizationId
		/// </summary>
		[DataMember(Name="organizationId", EmitDefaultValue=false)]
		public ObjectID OrganizationId { get; set; }
		/// <summary>
		/// Gets or Sets WorkflowId
		/// </summary>
		[DataMember(Name="workflowId", EmitDefaultValue=false)]
		public ObjectID WorkflowId { get; set; }
		/// <summary>
		/// Gets or Sets CreatedAt
		/// </summary>
		[DataMember(Name="createdAt", EmitDefaultValue=false)]
		public DateTime? CreatedAt { get; set; }
		/// <summary>
		/// Gets or Sets UpdatedAt
		/// </summary>
		[DataMember(Name="updatedAt", EmitDefaultValue=false)]
		public DateTime? UpdatedAt { get; set; }
		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Project {\n");
			sb.Append("  Name: ").Append(Name).Append("\n");
			sb.Append("  NotifyValidationOverdue: ").Append(NotifyValidationOverdue).Append("\n");
			sb.Append("  NotifyProcessingOverdue: ").Append(NotifyProcessingOverdue).Append("\n");
			sb.Append("  HoursToValidate: ").Append(HoursToValidate).Append("\n");
			sb.Append("  HoursToNextStep: ").Append(HoursToNextStep).Append("\n");
			sb.Append("  AssigningStrategy: ").Append(AssigningStrategy).Append("\n");
			sb.Append("  HandlingStrategy: ").Append(HandlingStrategy).Append("\n");
			sb.Append("  ValidatorIds: ").Append(ValidatorIds).Append("\n");
			sb.Append("  LastUploadDate: ").Append(LastUploadDate).Append("\n");
			sb.Append("  Id: ").Append(Id).Append("\n");
			sb.Append("  ManagerId: ").Append(ManagerId).Append("\n");
			sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
			sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
			sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
			sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}
  
		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			return this.Equals(obj as Project);
		}

		/// <summary>
		/// Returns true if Project instances are equal
		/// </summary>
		/// <param name="other">Instance of Project to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Project other)
		{
			// credit: http://stackoverflow.com/a/10454552/677735
			if (other == null)
				return false;

			return 
				(
					this.Name == other.Name ||
					this.Name != null &&
					this.Name.Equals(other.Name)
				) && 
				(
					this.NotifyValidationOverdue == other.NotifyValidationOverdue ||
					this.NotifyValidationOverdue != null &&
					this.NotifyValidationOverdue.Equals(other.NotifyValidationOverdue)
				) && 
				(
					this.NotifyProcessingOverdue == other.NotifyProcessingOverdue ||
					this.NotifyProcessingOverdue != null &&
					this.NotifyProcessingOverdue.Equals(other.NotifyProcessingOverdue)
				) && 
				(
					this.HoursToValidate == other.HoursToValidate ||
					this.HoursToValidate != null &&
					this.HoursToValidate.Equals(other.HoursToValidate)
				) && 
				(
					this.HoursToNextStep == other.HoursToNextStep ||
					this.HoursToNextStep != null &&
					this.HoursToNextStep.Equals(other.HoursToNextStep)
				) && 
				(
					this.AssigningStrategy == other.AssigningStrategy ||
					this.AssigningStrategy != null &&
					this.AssigningStrategy.Equals(other.AssigningStrategy)
				) && 
				(
					this.HandlingStrategy == other.HandlingStrategy ||
					this.HandlingStrategy != null &&
					this.HandlingStrategy.Equals(other.HandlingStrategy)
				) && 
				(
					this.ValidatorIds == other.ValidatorIds ||
					this.ValidatorIds != null &&
					this.ValidatorIds.SequenceEqual(other.ValidatorIds)
				) && 
				(
					this.LastUploadDate == other.LastUploadDate ||
					this.LastUploadDate != null &&
					this.LastUploadDate.Equals(other.LastUploadDate)
				) && 
				(
					this.Id == other.Id ||
					this.Id != null &&
					this.Id.Equals(other.Id)
				) && 
				(
					this.ManagerId == other.ManagerId ||
					this.ManagerId != null &&
					this.ManagerId.Equals(other.ManagerId)
				) && 
				(
					this.OrganizationId == other.OrganizationId ||
					this.OrganizationId != null &&
					this.OrganizationId.Equals(other.OrganizationId)
				) && 
				(
					this.WorkflowId == other.WorkflowId ||
					this.WorkflowId != null &&
					this.WorkflowId.Equals(other.WorkflowId)
				) && 
				(
					this.CreatedAt == other.CreatedAt ||
					this.CreatedAt != null &&
					this.CreatedAt.Equals(other.CreatedAt)
				) && 
				(
					this.UpdatedAt == other.UpdatedAt ||
					this.UpdatedAt != null &&
					this.UpdatedAt.Equals(other.UpdatedAt)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			// credit: http://stackoverflow.com/a/263416/677735
			unchecked // Overflow is fine, just wrap
			{
				int hash = 41;
				// Suitable nullity checks etc, of course :)
				if (this.Name != null)
					hash = hash * 59 + this.Name.GetHashCode();
				if (this.NotifyValidationOverdue != null)
					hash = hash * 59 + this.NotifyValidationOverdue.GetHashCode();
				if (this.NotifyProcessingOverdue != null)
					hash = hash * 59 + this.NotifyProcessingOverdue.GetHashCode();
				if (this.HoursToValidate != null)
					hash = hash * 59 + this.HoursToValidate.GetHashCode();
				if (this.HoursToNextStep != null)
					hash = hash * 59 + this.HoursToNextStep.GetHashCode();
				if (this.AssigningStrategy != null)
					hash = hash * 59 + this.AssigningStrategy.GetHashCode();
				if (this.HandlingStrategy != null)
					hash = hash * 59 + this.HandlingStrategy.GetHashCode();
				if (this.ValidatorIds != null)
					hash = hash * 59 + this.ValidatorIds.GetHashCode();
				if (this.LastUploadDate != null)
					hash = hash * 59 + this.LastUploadDate.GetHashCode();
				if (this.Id != null)
					hash = hash * 59 + this.Id.GetHashCode();
				if (this.ManagerId != null)
					hash = hash * 59 + this.ManagerId.GetHashCode();
				if (this.OrganizationId != null)
					hash = hash * 59 + this.OrganizationId.GetHashCode();
				if (this.WorkflowId != null)
					hash = hash * 59 + this.WorkflowId.GetHashCode();
				if (this.CreatedAt != null)
					hash = hash * 59 + this.CreatedAt.GetHashCode();
				if (this.UpdatedAt != null)
					hash = hash * 59 + this.UpdatedAt.GetHashCode();
				return hash;
			}
		}

		public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
		{ 
			yield break;
		}
	}

}

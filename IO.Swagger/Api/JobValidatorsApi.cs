/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IJobValidatorsApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		InlineResponse2001 JobValidatorsCount (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		ApiResponse<InlineResponse2001> JobValidatorsCountWithHttpInfo (string where = null);
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsCreate (JobValidators data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsCreateWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		System.IO.Stream JobValidatorsCreateChangeStreamGetJobValidatorsChangeStream (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		ApiResponse<System.IO.Stream> JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamWithHttpInfo (string options = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		System.IO.Stream JobValidatorsCreateChangeStreamPostJobValidatorsChangeStream (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		ApiResponse<System.IO.Stream> JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamWithHttpInfo (string options = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		Object JobValidatorsDeleteById (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobValidatorsDeleteByIdWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		InlineResponse2003 JobValidatorsExistsGetJobValidatorsidExists (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		ApiResponse<InlineResponse2003> JobValidatorsExistsGetJobValidatorsidExistsWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		InlineResponse2003 JobValidatorsExistsHeadJobValidatorsid (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		ApiResponse<InlineResponse2003> JobValidatorsExistsHeadJobValidatorsidWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;JobValidators&gt;</returns>
		List<JobValidators> JobValidatorsFind (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;JobValidators&gt;</returns>
		ApiResponse<List<JobValidators>> JobValidatorsFindWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsFindById (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsFindByIdWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsFindOne (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsFindOneWithHttpInfo (string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid (string id, JobValidators data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid (string id, JobValidators data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsReplaceById (string id, JobValidators data = null);

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsReplaceByIdWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsReplaceOrCreate (JobValidators data = null);

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsReplaceOrCreateWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>InlineResponse2004</returns>
		InlineResponse2004 JobValidatorsUpdateAll (string where = null, JobValidators data = null);

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of InlineResponse2004</returns>
		ApiResponse<InlineResponse2004> JobValidatorsUpdateAllWithHttpInfo (string where = null, JobValidators data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsUpsertPatchJobValidators (JobValidators data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsUpsertPatchJobValidatorsWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsUpsertPutJobValidators (JobValidators data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsUpsertPutJobValidatorsWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		JobValidators JobValidatorsUpsertWithWhere (string where = null, JobValidators data = null);

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		ApiResponse<JobValidators> JobValidatorsUpsertWithWhereWithHttpInfo (string where = null, JobValidators data = null);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		System.Threading.Tasks.Task<InlineResponse2001> JobValidatorsCountAsync (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> JobValidatorsCountAsyncWithHttpInfo (string where = null);
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsCreateAsync (JobValidators data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsCreateAsyncWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		System.Threading.Tasks.Task<System.IO.Stream> JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamAsync (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		System.Threading.Tasks.Task<System.IO.Stream> JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamAsync (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobValidatorsDeleteByIdAsync (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobValidatorsDeleteByIdAsyncWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		System.Threading.Tasks.Task<InlineResponse2003> JobValidatorsExistsGetJobValidatorsidExistsAsync (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> JobValidatorsExistsGetJobValidatorsidExistsAsyncWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		System.Threading.Tasks.Task<InlineResponse2003> JobValidatorsExistsHeadJobValidatorsidAsync (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> JobValidatorsExistsHeadJobValidatorsidAsyncWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;JobValidators&gt;</returns>
		System.Threading.Tasks.Task<List<JobValidators>> JobValidatorsFindAsync (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;JobValidators&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<JobValidators>>> JobValidatorsFindAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsFindByIdAsync (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsFindByIdAsyncWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsFindOneAsync (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsFindOneAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidAsync (string id, JobValidators data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidAsyncWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidAsync (string id, JobValidators data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidAsyncWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsReplaceByIdAsync (string id, JobValidators data = null);

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsReplaceByIdAsyncWithHttpInfo (string id, JobValidators data = null);
		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsReplaceOrCreateAsync (JobValidators data = null);

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsReplaceOrCreateAsyncWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of InlineResponse2004</returns>
		System.Threading.Tasks.Task<InlineResponse2004> JobValidatorsUpdateAllAsync (string where = null, JobValidators data = null);

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2004)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> JobValidatorsUpdateAllAsyncWithHttpInfo (string where = null, JobValidators data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertPatchJobValidatorsAsync (JobValidators data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertPatchJobValidatorsAsyncWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertPutJobValidatorsAsync (JobValidators data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertPutJobValidatorsAsyncWithHttpInfo (JobValidators data = null);
		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertWithWhereAsync (string where = null, JobValidators data = null);

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertWithWhereAsyncWithHttpInfo (string where = null, JobValidators data = null);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class JobValidatorsApi : IJobValidatorsApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="JobValidatorsApi"/> class.
		/// </summary>
		/// <returns></returns>
		public JobValidatorsApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobValidatorsApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public JobValidatorsApi(Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration {get; set;}

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		public InlineResponse2001 JobValidatorsCount (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = JobValidatorsCountWithHttpInfo(where);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		public ApiResponse< InlineResponse2001 > JobValidatorsCountWithHttpInfo (string where = null)
		{

			var localVarPath = "/jobValidators/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		public async System.Threading.Tasks.Task<InlineResponse2001> JobValidatorsCountAsync (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = await JobValidatorsCountAsyncWithHttpInfo(where);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> JobValidatorsCountAsyncWithHttpInfo (string where = null)
		{

			var localVarPath = "/jobValidators/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsCreate (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsCreateWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsCreateWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsCreateAsync (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsCreateAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsCreateAsyncWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		public System.IO.Stream JobValidatorsCreateChangeStreamGetJobValidatorsChangeStream (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		public ApiResponse< System.IO.Stream > JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobValidators/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreateChangeStreamGetJobValidatorsChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		public async System.Threading.Tasks.Task<System.IO.Stream> JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamAsync (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = await JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> JobValidatorsCreateChangeStreamGetJobValidatorsChangeStreamAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobValidators/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreateChangeStreamGetJobValidatorsChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		public System.IO.Stream JobValidatorsCreateChangeStreamPostJobValidatorsChangeStream (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		public ApiResponse< System.IO.Stream > JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobValidators/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreateChangeStreamPostJobValidatorsChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		public async System.Threading.Tasks.Task<System.IO.Stream> JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamAsync (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = await JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> JobValidatorsCreateChangeStreamPostJobValidatorsChangeStreamAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobValidators/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsCreateChangeStreamPostJobValidatorsChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		public Object JobValidatorsDeleteById (string id)
		{
			 ApiResponse<Object> localVarResponse = JobValidatorsDeleteByIdWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobValidatorsDeleteByIdWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsDeleteById");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobValidatorsDeleteByIdAsync (string id)
		{
			 ApiResponse<Object> localVarResponse = await JobValidatorsDeleteByIdAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobValidatorsDeleteByIdAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsDeleteById");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		public InlineResponse2003 JobValidatorsExistsGetJobValidatorsidExists (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = JobValidatorsExistsGetJobValidatorsidExistsWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		public ApiResponse< InlineResponse2003 > JobValidatorsExistsGetJobValidatorsidExistsWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsExistsGetJobValidatorsidExists");

			var localVarPath = "/jobValidators/{id}/exists";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsExistsGetJobValidatorsidExists", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		public async System.Threading.Tasks.Task<InlineResponse2003> JobValidatorsExistsGetJobValidatorsidExistsAsync (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = await JobValidatorsExistsGetJobValidatorsidExistsAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> JobValidatorsExistsGetJobValidatorsidExistsAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsExistsGetJobValidatorsidExists");

			var localVarPath = "/jobValidators/{id}/exists";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsExistsGetJobValidatorsidExists", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		public InlineResponse2003 JobValidatorsExistsHeadJobValidatorsid (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = JobValidatorsExistsHeadJobValidatorsidWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		public ApiResponse< InlineResponse2003 > JobValidatorsExistsHeadJobValidatorsidWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsExistsHeadJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsExistsHeadJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		public async System.Threading.Tasks.Task<InlineResponse2003> JobValidatorsExistsHeadJobValidatorsidAsync (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = await JobValidatorsExistsHeadJobValidatorsidAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> JobValidatorsExistsHeadJobValidatorsidAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsExistsHeadJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsExistsHeadJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;JobValidators&gt;</returns>
		public List<JobValidators> JobValidatorsFind (string filter = null)
		{
			 ApiResponse<List<JobValidators>> localVarResponse = JobValidatorsFindWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;JobValidators&gt;</returns>
		public ApiResponse< List<JobValidators> > JobValidatorsFindWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<JobValidators>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<JobValidators>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobValidators>)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;JobValidators&gt;</returns>
		public async System.Threading.Tasks.Task<List<JobValidators>> JobValidatorsFindAsync (string filter = null)
		{
			 ApiResponse<List<JobValidators>> localVarResponse = await JobValidatorsFindAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;JobValidators&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<JobValidators>>> JobValidatorsFindAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<JobValidators>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<JobValidators>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobValidators>)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsFindById (string id, string filter = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsFindByIdWithHttpInfo(id, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsFindByIdWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsFindById");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsFindByIdAsync (string id, string filter = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsFindByIdAsyncWithHttpInfo(id, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsFindByIdAsyncWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsFindById");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsFindOne (string filter = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsFindOneWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsFindOneWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobValidators/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsFindOneAsync (string filter = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsFindOneAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsFindOneAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobValidators/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidAsync (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsidAsyncWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsPrototypeUpdateAttributesPatchJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidAsync (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">jobValidators id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsPrototypeUpdateAttributesPutJobValidatorsidAsyncWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid");

			var localVarPath = "/jobValidators/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsPrototypeUpdateAttributesPutJobValidatorsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsReplaceById (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsReplaceByIdWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsReplaceByIdWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsReplaceById");

			var localVarPath = "/jobValidators/{id}/replace";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsReplaceById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsReplaceByIdAsync (string id, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsReplaceByIdAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsReplaceByIdAsyncWithHttpInfo (string id, JobValidators data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobValidatorsApi->JobValidatorsReplaceById");

			var localVarPath = "/jobValidators/{id}/replace";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsReplaceById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsReplaceOrCreate (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsReplaceOrCreateWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsReplaceOrCreateWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators/replaceOrCreate";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsReplaceOrCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsReplaceOrCreateAsync (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsReplaceOrCreateAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsReplaceOrCreateAsyncWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators/replaceOrCreate";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsReplaceOrCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>InlineResponse2004</returns>
		public InlineResponse2004 JobValidatorsUpdateAll (string where = null, JobValidators data = null)
		{
			 ApiResponse<InlineResponse2004> localVarResponse = JobValidatorsUpdateAllWithHttpInfo(where, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of InlineResponse2004</returns>
		public ApiResponse< InlineResponse2004 > JobValidatorsUpdateAllWithHttpInfo (string where = null, JobValidators data = null)
		{

			var localVarPath = "/jobValidators/update";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpdateAll", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2004>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
			
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of InlineResponse2004</returns>
		public async System.Threading.Tasks.Task<InlineResponse2004> JobValidatorsUpdateAllAsync (string where = null, JobValidators data = null)
		{
			 ApiResponse<InlineResponse2004> localVarResponse = await JobValidatorsUpdateAllAsyncWithHttpInfo(where, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2004)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> JobValidatorsUpdateAllAsyncWithHttpInfo (string where = null, JobValidators data = null)
		{

			var localVarPath = "/jobValidators/update";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpdateAll", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2004>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsUpsertPatchJobValidators (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsUpsertPatchJobValidatorsWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsUpsertPatchJobValidatorsWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertPatchJobValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertPatchJobValidatorsAsync (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsUpsertPatchJobValidatorsAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertPatchJobValidatorsAsyncWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertPatchJobValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsUpsertPutJobValidators (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsUpsertPutJobValidatorsWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsUpsertPutJobValidatorsWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertPutJobValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertPutJobValidatorsAsync (JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsUpsertPutJobValidatorsAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertPutJobValidatorsAsyncWithHttpInfo (JobValidators data = null)
		{

			var localVarPath = "/jobValidators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertPutJobValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>JobValidators</returns>
		public JobValidators JobValidatorsUpsertWithWhere (string where = null, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = JobValidatorsUpsertWithWhereWithHttpInfo(where, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of JobValidators</returns>
		public ApiResponse< JobValidators > JobValidatorsUpsertWithWhereWithHttpInfo (string where = null, JobValidators data = null)
		{

			var localVarPath = "/jobValidators/upsertWithWhere";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertWithWhere", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of JobValidators</returns>
		public async System.Threading.Tasks.Task<JobValidators> JobValidatorsUpsertWithWhereAsync (string where = null, JobValidators data = null)
		{
			 ApiResponse<JobValidators> localVarResponse = await JobValidatorsUpsertWithWhereAsyncWithHttpInfo(where, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (JobValidators)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<JobValidators>> JobValidatorsUpsertWithWhereAsyncWithHttpInfo (string where = null, JobValidators data = null)
		{

			var localVarPath = "/jobValidators/upsertWithWhere";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidatorsUpsertWithWhere", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<JobValidators>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(JobValidators) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobValidators)));
			
		}

	}
}

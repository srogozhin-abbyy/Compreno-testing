/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IContainerApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>InlineResponse200</returns>
		InlineResponse200 ContainerDeleteContainer (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of InlineResponse200</returns>
		ApiResponse<InlineResponse200> ContainerDeleteContainerWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>InlineResponse200</returns>
		InlineResponse200 ContainerDeleteFile (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of InlineResponse200</returns>
		ApiResponse<InlineResponse200> ContainerDeleteFileWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns></returns>
		void ContainerDownload (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> ContainerDownloadWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns></returns>
		void ContainerDownloadContainer (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> ContainerDownloadContainerWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>List&lt;object&gt;</returns>
		List<object> ContainerGetContainers ();

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		ApiResponse<List<object>> ContainerGetContainersWithHttpInfo ();
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Object</returns>
		Object ContainerGetFile (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> ContainerGetFileWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>List&lt;object&gt;</returns>
		List<object> ContainerGetFiles (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		ApiResponse<List<object>> ContainerGetFilesWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Object</returns>
		Object ContainerUpload (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> ContainerUploadWithHttpInfo (string containerName);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of InlineResponse200</returns>
		System.Threading.Tasks.Task<InlineResponse200> ContainerDeleteContainerAsync (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (InlineResponse200)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ContainerDeleteContainerAsyncWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of InlineResponse200</returns>
		System.Threading.Tasks.Task<InlineResponse200> ContainerDeleteFileAsync (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse (InlineResponse200)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ContainerDeleteFileAsyncWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task ContainerDownloadAsync (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> ContainerDownloadAsyncWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task ContainerDownloadContainerAsync (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> ContainerDownloadContainerAsyncWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of List&lt;object&gt;</returns>
		System.Threading.Tasks.Task<List<object>> ContainerGetContainersAsync ();

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<object>>> ContainerGetContainersAsyncWithHttpInfo ();
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> ContainerGetFileAsync (string containerName, string fileId);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> ContainerGetFileAsyncWithHttpInfo (string containerName, string fileId);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of List&lt;object&gt;</returns>
		System.Threading.Tasks.Task<List<object>> ContainerGetFilesAsync (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<object>>> ContainerGetFilesAsyncWithHttpInfo (string containerName);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> ContainerUploadAsync (string containerName);

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> ContainerUploadAsyncWithHttpInfo (string containerName);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class ContainerApi : IContainerApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="ContainerApi"/> class.
		/// </summary>
		/// <returns></returns>
		public ContainerApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ContainerApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public ContainerApi(Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration {get; set;}

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>InlineResponse200</returns>
		public InlineResponse200 ContainerDeleteContainer (string containerName)
		{
			 ApiResponse<InlineResponse200> localVarResponse = ContainerDeleteContainerWithHttpInfo(containerName);
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of InlineResponse200</returns>
		public ApiResponse< InlineResponse200 > ContainerDeleteContainerWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDeleteContainer");

			var localVarPath = "/containers/{containerName}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDeleteContainer", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse200>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of InlineResponse200</returns>
		public async System.Threading.Tasks.Task<InlineResponse200> ContainerDeleteContainerAsync (string containerName)
		{
			 ApiResponse<InlineResponse200> localVarResponse = await ContainerDeleteContainerAsyncWithHttpInfo(containerName);
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (InlineResponse200)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ContainerDeleteContainerAsyncWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDeleteContainer");

			var localVarPath = "/containers/{containerName}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDeleteContainer", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse200>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>InlineResponse200</returns>
		public InlineResponse200 ContainerDeleteFile (string containerName, string fileId)
		{
			 ApiResponse<InlineResponse200> localVarResponse = ContainerDeleteFileWithHttpInfo(containerName, fileId);
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of InlineResponse200</returns>
		public ApiResponse< InlineResponse200 > ContainerDeleteFileWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDeleteFile");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerDeleteFile");

			var localVarPath = "/containers/{containerName}/files/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDeleteFile", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse200>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of InlineResponse200</returns>
		public async System.Threading.Tasks.Task<InlineResponse200> ContainerDeleteFileAsync (string containerName, string fileId)
		{
			 ApiResponse<InlineResponse200> localVarResponse = await ContainerDeleteFileAsyncWithHttpInfo(containerName, fileId);
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse (InlineResponse200)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ContainerDeleteFileAsyncWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDeleteFile");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerDeleteFile");

			var localVarPath = "/containers/{containerName}/files/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDeleteFile", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse200>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns></returns>
		public void ContainerDownload (string containerName, string fileId)
		{
			 ContainerDownloadWithHttpInfo(containerName, fileId);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> ContainerDownloadWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDownload");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerDownload");

			var localVarPath = "/containers/{containerName}/download/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDownload", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task ContainerDownloadAsync (string containerName, string fileId)
		{
			 await ContainerDownloadAsyncWithHttpInfo(containerName, fileId);

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerDownloadAsyncWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDownload");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerDownload");

			var localVarPath = "/containers/{containerName}/download/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDownload", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns></returns>
		public void ContainerDownloadContainer (string containerName)
		{
			 ContainerDownloadContainerWithHttpInfo(containerName);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> ContainerDownloadContainerWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDownloadContainer");

			var localVarPath = "/containers/{containerName}/zip";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDownloadContainer", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task ContainerDownloadContainerAsync (string containerName)
		{
			 await ContainerDownloadContainerAsyncWithHttpInfo(containerName);

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerDownloadContainerAsyncWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerDownloadContainer");

			var localVarPath = "/containers/{containerName}/zip";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerDownloadContainer", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>List&lt;object&gt;</returns>
		public List<object> ContainerGetContainers ()
		{
			 ApiResponse<List<object>> localVarResponse = ContainerGetContainersWithHttpInfo();
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		public ApiResponse< List<object> > ContainerGetContainersWithHttpInfo ()
		{

			var localVarPath = "/containers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetContainers", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of List&lt;object&gt;</returns>
		public async System.Threading.Tasks.Task<List<object>> ContainerGetContainersAsync ()
		{
			 ApiResponse<List<object>> localVarResponse = await ContainerGetContainersAsyncWithHttpInfo();
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<object>>> ContainerGetContainersAsyncWithHttpInfo ()
		{

			var localVarPath = "/containers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetContainers", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Object</returns>
		public Object ContainerGetFile (string containerName, string fileId)
		{
			 ApiResponse<Object> localVarResponse = ContainerGetFileWithHttpInfo(containerName, fileId);
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > ContainerGetFileWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerGetFile");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerGetFile");

			var localVarPath = "/containers/{containerName}/files/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetFile", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> ContainerGetFileAsync (string containerName, string fileId)
		{
			 ApiResponse<Object> localVarResponse = await ContainerGetFileAsyncWithHttpInfo(containerName, fileId);
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <param name="fileId">File id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerGetFileAsyncWithHttpInfo (string containerName, string fileId)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerGetFile");
			// verify the required parameter 'fileId' is set
			if (fileId == null)
				throw new ApiException(400, "Missing required parameter 'fileId' when calling ContainerApi->ContainerGetFile");

			var localVarPath = "/containers/{containerName}/files/{fileId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter
			if (fileId != null) localVarPathParams.Add("fileId", Configuration.ApiClient.ParameterToString(fileId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetFile", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>List&lt;object&gt;</returns>
		public List<object> ContainerGetFiles (string containerName)
		{
			 ApiResponse<List<object>> localVarResponse = ContainerGetFilesWithHttpInfo(containerName);
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		public ApiResponse< List<object> > ContainerGetFilesWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerGetFiles");

			var localVarPath = "/containers/{containerName}/files";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetFiles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of List&lt;object&gt;</returns>
		public async System.Threading.Tasks.Task<List<object>> ContainerGetFilesAsync (string containerName)
		{
			 ApiResponse<List<object>> localVarResponse = await ContainerGetFilesAsyncWithHttpInfo(containerName);
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<object>>> ContainerGetFilesAsyncWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerGetFiles");

			var localVarPath = "/containers/{containerName}/files";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerGetFiles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Object</returns>
		public Object ContainerUpload (string containerName)
		{
			 ApiResponse<Object> localVarResponse = ContainerUploadWithHttpInfo(containerName);
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > ContainerUploadWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerUpload");

			var localVarPath = "/containers/{containerName}/upload";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerUpload", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> ContainerUploadAsync (string containerName)
		{
			 ApiResponse<Object> localVarResponse = await ContainerUploadAsyncWithHttpInfo(containerName);
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="containerName">Container name</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerUploadAsyncWithHttpInfo (string containerName)
		{
			// verify the required parameter 'containerName' is set
			if (containerName == null)
				throw new ApiException(400, "Missing required parameter 'containerName' when calling ContainerApi->ContainerUpload");

			var localVarPath = "/containers/{containerName}/upload";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (containerName != null) localVarPathParams.Add("containerName", Configuration.ApiClient.ParameterToString(containerName)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ContainerUpload", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

	}
}

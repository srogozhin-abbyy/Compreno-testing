/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IRoleApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		InlineResponse2001 RoleCount (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		ApiResponse<InlineResponse2001> RoleCountWithHttpInfo (string where = null);
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		Role RoleCreate (Role data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleCreateWithHttpInfo (Role data = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		System.IO.Stream RoleCreateChangeStreamGetRolesChangeStream (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		ApiResponse<System.IO.Stream> RoleCreateChangeStreamGetRolesChangeStreamWithHttpInfo (string options = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		System.IO.Stream RoleCreateChangeStreamPostRolesChangeStream (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		ApiResponse<System.IO.Stream> RoleCreateChangeStreamPostRolesChangeStreamWithHttpInfo (string options = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		Object RoleDeleteById (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> RoleDeleteByIdWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		InlineResponse2003 RoleExistsGetRolesidExists (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		ApiResponse<InlineResponse2003> RoleExistsGetRolesidExistsWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		InlineResponse2003 RoleExistsHeadRolesid (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		ApiResponse<InlineResponse2003> RoleExistsHeadRolesidWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Role&gt;</returns>
		List<Role> RoleFind (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Role&gt;</returns>
		ApiResponse<List<Role>> RoleFindWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Role</returns>
		Role RoleFindById (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleFindByIdWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Role</returns>
		Role RoleFindOne (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleFindOneWithHttpInfo (string filter = null);
		/// <summary>
		/// Counts principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		InlineResponse2001 RolePrototypeCountPrincipals (string id, string where = null);

		/// <summary>
		/// Counts principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		ApiResponse<InlineResponse2001> RolePrototypeCountPrincipalsWithHttpInfo (string id, string where = null);
		/// <summary>
		/// Creates a new instance in principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>RoleMapping</returns>
		RoleMapping RolePrototypeCreatePrincipals (string id, RoleMapping data = null);

		/// <summary>
		/// Creates a new instance in principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		ApiResponse<RoleMapping> RolePrototypeCreatePrincipalsWithHttpInfo (string id, RoleMapping data = null);
		/// <summary>
		/// Deletes all principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns></returns>
		void RolePrototypeDeletePrincipals (string id);

		/// <summary>
		/// Deletes all principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> RolePrototypeDeletePrincipalsWithHttpInfo (string id);
		/// <summary>
		/// Delete a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns></returns>
		void RolePrototypeDestroyByIdPrincipals (string fk, string id);

		/// <summary>
		/// Delete a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> RolePrototypeDestroyByIdPrincipalsWithHttpInfo (string fk, string id);
		/// <summary>
		/// Find a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>RoleMapping</returns>
		RoleMapping RolePrototypeFindByIdPrincipals (string fk, string id);

		/// <summary>
		/// Find a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		ApiResponse<RoleMapping> RolePrototypeFindByIdPrincipalsWithHttpInfo (string fk, string id);
		/// <summary>
		/// Queries principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>List&lt;RoleMapping&gt;</returns>
		List<RoleMapping> RolePrototypeGetPrincipals (string id, string filter = null);

		/// <summary>
		/// Queries principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of List&lt;RoleMapping&gt;</returns>
		ApiResponse<List<RoleMapping>> RolePrototypeGetPrincipalsWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		Role RolePrototypeUpdateAttributesPatchRolesid (string id, Role data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RolePrototypeUpdateAttributesPatchRolesidWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		Role RolePrototypeUpdateAttributesPutRolesid (string id, Role data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RolePrototypeUpdateAttributesPutRolesidWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Update a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>RoleMapping</returns>
		RoleMapping RolePrototypeUpdateByIdPrincipals (string fk, string id, RoleMapping data = null);

		/// <summary>
		/// Update a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		ApiResponse<RoleMapping> RolePrototypeUpdateByIdPrincipalsWithHttpInfo (string fk, string id, RoleMapping data = null);
		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		Role RoleReplaceById (string id, Role data = null);

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleReplaceByIdWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		Role RoleReplaceOrCreate (Role data = null);

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleReplaceOrCreateWithHttpInfo (Role data = null);
		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>InlineResponse2004</returns>
		InlineResponse2004 RoleUpdateAll (string where = null, Role data = null);

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of InlineResponse2004</returns>
		ApiResponse<InlineResponse2004> RoleUpdateAllWithHttpInfo (string where = null, Role data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		Role RoleUpsertPatchRoles (Role data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleUpsertPatchRolesWithHttpInfo (Role data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		Role RoleUpsertPutRoles (Role data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleUpsertPutRolesWithHttpInfo (Role data = null);
		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		Role RoleUpsertWithWhere (string where = null, Role data = null);

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		ApiResponse<Role> RoleUpsertWithWhereWithHttpInfo (string where = null, Role data = null);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		System.Threading.Tasks.Task<InlineResponse2001> RoleCountAsync (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RoleCountAsyncWithHttpInfo (string where = null);
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleCreateAsync (Role data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleCreateAsyncWithHttpInfo (Role data = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		System.Threading.Tasks.Task<System.IO.Stream> RoleCreateChangeStreamGetRolesChangeStreamAsync (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RoleCreateChangeStreamGetRolesChangeStreamAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		System.Threading.Tasks.Task<System.IO.Stream> RoleCreateChangeStreamPostRolesChangeStreamAsync (string options = null);

		/// <summary>
		/// Create a change stream.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RoleCreateChangeStreamPostRolesChangeStreamAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> RoleDeleteByIdAsync (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> RoleDeleteByIdAsyncWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		System.Threading.Tasks.Task<InlineResponse2003> RoleExistsGetRolesidExistsAsync (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RoleExistsGetRolesidExistsAsyncWithHttpInfo (string id);
		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		System.Threading.Tasks.Task<InlineResponse2003> RoleExistsHeadRolesidAsync (string id);

		/// <summary>
		/// Check whether a model instance exists in the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RoleExistsHeadRolesidAsyncWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Role&gt;</returns>
		System.Threading.Tasks.Task<List<Role>> RoleFindAsync (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<Role>>> RoleFindAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleFindByIdAsync (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleFindByIdAsyncWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleFindOneAsync (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleFindOneAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Counts principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		System.Threading.Tasks.Task<InlineResponse2001> RolePrototypeCountPrincipalsAsync (string id, string where = null);

		/// <summary>
		/// Counts principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RolePrototypeCountPrincipalsAsyncWithHttpInfo (string id, string where = null);
		/// <summary>
		/// Creates a new instance in principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of RoleMapping</returns>
		System.Threading.Tasks.Task<RoleMapping> RolePrototypeCreatePrincipalsAsync (string id, RoleMapping data = null);

		/// <summary>
		/// Creates a new instance in principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeCreatePrincipalsAsyncWithHttpInfo (string id, RoleMapping data = null);
		/// <summary>
		/// Deletes all principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task RolePrototypeDeletePrincipalsAsync (string id);

		/// <summary>
		/// Deletes all principals of this model.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> RolePrototypeDeletePrincipalsAsyncWithHttpInfo (string id);
		/// <summary>
		/// Delete a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task RolePrototypeDestroyByIdPrincipalsAsync (string fk, string id);

		/// <summary>
		/// Delete a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> RolePrototypeDestroyByIdPrincipalsAsyncWithHttpInfo (string fk, string id);
		/// <summary>
		/// Find a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of RoleMapping</returns>
		System.Threading.Tasks.Task<RoleMapping> RolePrototypeFindByIdPrincipalsAsync (string fk, string id);

		/// <summary>
		/// Find a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeFindByIdPrincipalsAsyncWithHttpInfo (string fk, string id);
		/// <summary>
		/// Queries principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of List&lt;RoleMapping&gt;</returns>
		System.Threading.Tasks.Task<List<RoleMapping>> RolePrototypeGetPrincipalsAsync (string id, string filter = null);

		/// <summary>
		/// Queries principals of role.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;RoleMapping&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<RoleMapping>>> RolePrototypeGetPrincipalsAsyncWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RolePrototypeUpdateAttributesPatchRolesidAsync (string id, Role data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RolePrototypeUpdateAttributesPatchRolesidAsyncWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RolePrototypeUpdateAttributesPutRolesidAsync (string id, Role data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RolePrototypeUpdateAttributesPutRolesidAsyncWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Update a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of RoleMapping</returns>
		System.Threading.Tasks.Task<RoleMapping> RolePrototypeUpdateByIdPrincipalsAsync (string fk, string id, RoleMapping data = null);

		/// <summary>
		/// Update a related item by id for principals.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeUpdateByIdPrincipalsAsyncWithHttpInfo (string fk, string id, RoleMapping data = null);
		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleReplaceByIdAsync (string id, Role data = null);

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleReplaceByIdAsyncWithHttpInfo (string id, Role data = null);
		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleReplaceOrCreateAsync (Role data = null);

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleReplaceOrCreateAsyncWithHttpInfo (Role data = null);
		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of InlineResponse2004</returns>
		System.Threading.Tasks.Task<InlineResponse2004> RoleUpdateAllAsync (string where = null, Role data = null);

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2004)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> RoleUpdateAllAsyncWithHttpInfo (string where = null, Role data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleUpsertPatchRolesAsync (Role data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertPatchRolesAsyncWithHttpInfo (Role data = null);
		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleUpsertPutRolesAsync (Role data = null);

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertPutRolesAsyncWithHttpInfo (Role data = null);
		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		System.Threading.Tasks.Task<Role> RoleUpsertWithWhereAsync (string where = null, Role data = null);

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertWithWhereAsyncWithHttpInfo (string where = null, Role data = null);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class RoleApi : IRoleApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="RoleApi"/> class.
		/// </summary>
		/// <returns></returns>
		public RoleApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RoleApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public RoleApi(Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration {get; set;}

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		public InlineResponse2001 RoleCount (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = RoleCountWithHttpInfo(where);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		public ApiResponse< InlineResponse2001 > RoleCountWithHttpInfo (string where = null)
		{

			var localVarPath = "/roles/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		public async System.Threading.Tasks.Task<InlineResponse2001> RoleCountAsync (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = await RoleCountAsyncWithHttpInfo(where);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RoleCountAsyncWithHttpInfo (string where = null)
		{

			var localVarPath = "/roles/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		public Role RoleCreate (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleCreateWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleCreateWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleCreateAsync (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleCreateAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleCreateAsyncWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		public System.IO.Stream RoleCreateChangeStreamGetRolesChangeStream (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = RoleCreateChangeStreamGetRolesChangeStreamWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		public ApiResponse< System.IO.Stream > RoleCreateChangeStreamGetRolesChangeStreamWithHttpInfo (string options = null)
		{

			var localVarPath = "/roles/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreateChangeStreamGetRolesChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		public async System.Threading.Tasks.Task<System.IO.Stream> RoleCreateChangeStreamGetRolesChangeStreamAsync (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = await RoleCreateChangeStreamGetRolesChangeStreamAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RoleCreateChangeStreamGetRolesChangeStreamAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/roles/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreateChangeStreamGetRolesChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>System.IO.Stream</returns>
		public System.IO.Stream RoleCreateChangeStreamPostRolesChangeStream (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = RoleCreateChangeStreamPostRolesChangeStreamWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of System.IO.Stream</returns>
		public ApiResponse< System.IO.Stream > RoleCreateChangeStreamPostRolesChangeStreamWithHttpInfo (string options = null)
		{

			var localVarPath = "/roles/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreateChangeStreamPostRolesChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of System.IO.Stream</returns>
		public async System.Threading.Tasks.Task<System.IO.Stream> RoleCreateChangeStreamPostRolesChangeStreamAsync (string options = null)
		{
			 ApiResponse<System.IO.Stream> localVarResponse = await RoleCreateChangeStreamPostRolesChangeStreamAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a change stream. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (System.IO.Stream)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RoleCreateChangeStreamPostRolesChangeStreamAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/roles/change-stream";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleCreateChangeStreamPostRolesChangeStream", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<System.IO.Stream>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		public Object RoleDeleteById (string id)
		{
			 ApiResponse<Object> localVarResponse = RoleDeleteByIdWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > RoleDeleteByIdWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleDeleteById");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> RoleDeleteByIdAsync (string id)
		{
			 ApiResponse<Object> localVarResponse = await RoleDeleteByIdAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> RoleDeleteByIdAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleDeleteById");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		public InlineResponse2003 RoleExistsGetRolesidExists (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = RoleExistsGetRolesidExistsWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		public ApiResponse< InlineResponse2003 > RoleExistsGetRolesidExistsWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleExistsGetRolesidExists");

			var localVarPath = "/roles/{id}/exists";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleExistsGetRolesidExists", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		public async System.Threading.Tasks.Task<InlineResponse2003> RoleExistsGetRolesidExistsAsync (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = await RoleExistsGetRolesidExistsAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RoleExistsGetRolesidExistsAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleExistsGetRolesidExists");

			var localVarPath = "/roles/{id}/exists";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleExistsGetRolesidExists", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>InlineResponse2003</returns>
		public InlineResponse2003 RoleExistsHeadRolesid (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = RoleExistsHeadRolesidWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of InlineResponse2003</returns>
		public ApiResponse< InlineResponse2003 > RoleExistsHeadRolesidWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleExistsHeadRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleExistsHeadRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of InlineResponse2003</returns>
		public async System.Threading.Tasks.Task<InlineResponse2003> RoleExistsHeadRolesidAsync (string id)
		{
			 ApiResponse<InlineResponse2003> localVarResponse = await RoleExistsHeadRolesidAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Check whether a model instance exists in the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (InlineResponse2003)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RoleExistsHeadRolesidAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleExistsHeadRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleExistsHeadRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2003>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Role&gt;</returns>
		public List<Role> RoleFind (string filter = null)
		{
			 ApiResponse<List<Role>> localVarResponse = RoleFindWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Role&gt;</returns>
		public ApiResponse< List<Role> > RoleFindWithHttpInfo (string filter = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Role>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Role>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Role&gt;</returns>
		public async System.Threading.Tasks.Task<List<Role>> RoleFindAsync (string filter = null)
		{
			 ApiResponse<List<Role>> localVarResponse = await RoleFindAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<Role>>> RoleFindAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Role>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Role>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Role>)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Role</returns>
		public Role RoleFindById (string id, string filter = null)
		{
			 ApiResponse<Role> localVarResponse = RoleFindByIdWithHttpInfo(id, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleFindByIdWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleFindById");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleFindByIdAsync (string id, string filter = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleFindByIdAsyncWithHttpInfo(id, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleFindByIdAsyncWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleFindById");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Role</returns>
		public Role RoleFindOne (string filter = null)
		{
			 ApiResponse<Role> localVarResponse = RoleFindOneWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleFindOneWithHttpInfo (string filter = null)
		{

			var localVarPath = "/roles/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleFindOneAsync (string filter = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleFindOneAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleFindOneAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/roles/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Counts principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		public InlineResponse2001 RolePrototypeCountPrincipals (string id, string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = RolePrototypeCountPrincipalsWithHttpInfo(id, where);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Counts principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		public ApiResponse< InlineResponse2001 > RolePrototypeCountPrincipalsWithHttpInfo (string id, string where = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeCountPrincipals");

			var localVarPath = "/roles/{id}/principals/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeCountPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Counts principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		public async System.Threading.Tasks.Task<InlineResponse2001> RolePrototypeCountPrincipalsAsync (string id, string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = await RolePrototypeCountPrincipalsAsyncWithHttpInfo(id, where);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Counts principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> RolePrototypeCountPrincipalsAsyncWithHttpInfo (string id, string where = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeCountPrincipals");

			var localVarPath = "/roles/{id}/principals/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeCountPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Creates a new instance in principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>RoleMapping</returns>
		public RoleMapping RolePrototypeCreatePrincipals (string id, RoleMapping data = null)
		{
			 ApiResponse<RoleMapping> localVarResponse = RolePrototypeCreatePrincipalsWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Creates a new instance in principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		public ApiResponse< RoleMapping > RolePrototypeCreatePrincipalsWithHttpInfo (string id, RoleMapping data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeCreatePrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeCreatePrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Creates a new instance in principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of RoleMapping</returns>
		public async System.Threading.Tasks.Task<RoleMapping> RolePrototypeCreatePrincipalsAsync (string id, RoleMapping data = null)
		{
			 ApiResponse<RoleMapping> localVarResponse = await RolePrototypeCreatePrincipalsAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Creates a new instance in principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeCreatePrincipalsAsyncWithHttpInfo (string id, RoleMapping data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeCreatePrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeCreatePrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Deletes all principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns></returns>
		public void RolePrototypeDeletePrincipals (string id)
		{
			 RolePrototypeDeletePrincipalsWithHttpInfo(id);
		}

		/// <summary>
		/// Deletes all principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> RolePrototypeDeletePrincipalsWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeDeletePrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeDeletePrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		/// Deletes all principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task RolePrototypeDeletePrincipalsAsync (string id)
		{
			 await RolePrototypeDeletePrincipalsAsyncWithHttpInfo(id);

		}

		/// <summary>
		/// Deletes all principals of this model. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> RolePrototypeDeletePrincipalsAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeDeletePrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeDeletePrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		/// Delete a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns></returns>
		public void RolePrototypeDestroyByIdPrincipals (string fk, string id)
		{
			 RolePrototypeDestroyByIdPrincipalsWithHttpInfo(fk, id);
		}

		/// <summary>
		/// Delete a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> RolePrototypeDestroyByIdPrincipalsWithHttpInfo (string fk, string id)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeDestroyByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeDestroyByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeDestroyByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		/// Delete a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task RolePrototypeDestroyByIdPrincipalsAsync (string fk, string id)
		{
			 await RolePrototypeDestroyByIdPrincipalsAsyncWithHttpInfo(fk, id);

		}

		/// <summary>
		/// Delete a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> RolePrototypeDestroyByIdPrincipalsAsyncWithHttpInfo (string fk, string id)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeDestroyByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeDestroyByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeDestroyByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			
			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				null);
		}

		/// <summary>
		/// Find a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>RoleMapping</returns>
		public RoleMapping RolePrototypeFindByIdPrincipals (string fk, string id)
		{
			 ApiResponse<RoleMapping> localVarResponse = RolePrototypeFindByIdPrincipalsWithHttpInfo(fk, id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		public ApiResponse< RoleMapping > RolePrototypeFindByIdPrincipalsWithHttpInfo (string fk, string id)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeFindByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeFindByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeFindByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Find a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of RoleMapping</returns>
		public async System.Threading.Tasks.Task<RoleMapping> RolePrototypeFindByIdPrincipalsAsync (string fk, string id)
		{
			 ApiResponse<RoleMapping> localVarResponse = await RolePrototypeFindByIdPrincipalsAsyncWithHttpInfo(fk, id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeFindByIdPrincipalsAsyncWithHttpInfo (string fk, string id)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeFindByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeFindByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeFindByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Queries principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>List&lt;RoleMapping&gt;</returns>
		public List<RoleMapping> RolePrototypeGetPrincipals (string id, string filter = null)
		{
			 ApiResponse<List<RoleMapping>> localVarResponse = RolePrototypeGetPrincipalsWithHttpInfo(id, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Queries principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of List&lt;RoleMapping&gt;</returns>
		public ApiResponse< List<RoleMapping> > RolePrototypeGetPrincipalsWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeGetPrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeGetPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<RoleMapping>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<RoleMapping>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleMapping>)));
			
		}

		/// <summary>
		/// Queries principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of List&lt;RoleMapping&gt;</returns>
		public async System.Threading.Tasks.Task<List<RoleMapping>> RolePrototypeGetPrincipalsAsync (string id, string filter = null)
		{
			 ApiResponse<List<RoleMapping>> localVarResponse = await RolePrototypeGetPrincipalsAsyncWithHttpInfo(id, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Queries principals of role. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;RoleMapping&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<RoleMapping>>> RolePrototypeGetPrincipalsAsyncWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeGetPrincipals");

			var localVarPath = "/roles/{id}/principals";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeGetPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<RoleMapping>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<RoleMapping>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleMapping>)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		public Role RolePrototypeUpdateAttributesPatchRolesid (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RolePrototypeUpdateAttributesPatchRolesidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RolePrototypeUpdateAttributesPatchRolesidWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateAttributesPatchRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateAttributesPatchRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RolePrototypeUpdateAttributesPatchRolesidAsync (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RolePrototypeUpdateAttributesPatchRolesidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RolePrototypeUpdateAttributesPatchRolesidAsyncWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateAttributesPatchRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateAttributesPatchRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		public Role RolePrototypeUpdateAttributesPutRolesid (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RolePrototypeUpdateAttributesPutRolesidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RolePrototypeUpdateAttributesPutRolesidWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateAttributesPutRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateAttributesPutRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RolePrototypeUpdateAttributesPutRolesidAsync (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RolePrototypeUpdateAttributesPutRolesidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">role id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RolePrototypeUpdateAttributesPutRolesidAsyncWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateAttributesPutRolesid");

			var localVarPath = "/roles/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateAttributesPutRolesid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Update a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>RoleMapping</returns>
		public RoleMapping RolePrototypeUpdateByIdPrincipals (string fk, string id, RoleMapping data = null)
		{
			 ApiResponse<RoleMapping> localVarResponse = RolePrototypeUpdateByIdPrincipalsWithHttpInfo(fk, id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>ApiResponse of RoleMapping</returns>
		public ApiResponse< RoleMapping > RolePrototypeUpdateByIdPrincipalsWithHttpInfo (string fk, string id, RoleMapping data = null)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeUpdateByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Update a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of RoleMapping</returns>
		public async System.Threading.Tasks.Task<RoleMapping> RolePrototypeUpdateByIdPrincipalsAsync (string fk, string id, RoleMapping data = null)
		{
			 ApiResponse<RoleMapping> localVarResponse = await RolePrototypeUpdateByIdPrincipalsAsyncWithHttpInfo(fk, id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update a related item by id for principals. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="fk">Foreign key for principals</param>
		/// <param name="id">role id</param>
		/// <param name="data"> (optional)</param>
		/// <returns>Task of ApiResponse (RoleMapping)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<RoleMapping>> RolePrototypeUpdateByIdPrincipalsAsyncWithHttpInfo (string fk, string id, RoleMapping data = null)
		{
			// verify the required parameter 'fk' is set
			if (fk == null)
				throw new ApiException(400, "Missing required parameter 'fk' when calling RoleApi->RolePrototypeUpdateByIdPrincipals");
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RolePrototypeUpdateByIdPrincipals");

			var localVarPath = "/roles/{id}/principals/{fk}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RolePrototypeUpdateByIdPrincipals", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<RoleMapping>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(RoleMapping) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleMapping)));
			
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		public Role RoleReplaceById (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleReplaceByIdWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleReplaceByIdWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleReplaceById");

			var localVarPath = "/roles/{id}/replace";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleReplaceById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleReplaceByIdAsync (string id, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleReplaceByIdAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Replace attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleReplaceByIdAsyncWithHttpInfo (string id, Role data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling RoleApi->RoleReplaceById");

			var localVarPath = "/roles/{id}/replace";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleReplaceById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		public Role RoleReplaceOrCreate (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleReplaceOrCreateWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleReplaceOrCreateWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles/replaceOrCreate";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleReplaceOrCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleReplaceOrCreateAsync (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleReplaceOrCreateAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Replace an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleReplaceOrCreateAsyncWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles/replaceOrCreate";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleReplaceOrCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>InlineResponse2004</returns>
		public InlineResponse2004 RoleUpdateAll (string where = null, Role data = null)
		{
			 ApiResponse<InlineResponse2004> localVarResponse = RoleUpdateAllWithHttpInfo(where, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of InlineResponse2004</returns>
		public ApiResponse< InlineResponse2004 > RoleUpdateAllWithHttpInfo (string where = null, Role data = null)
		{

			var localVarPath = "/roles/update";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpdateAll", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2004>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
			
		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of InlineResponse2004</returns>
		public async System.Threading.Tasks.Task<InlineResponse2004> RoleUpdateAllAsync (string where = null, Role data = null)
		{
			 ApiResponse<InlineResponse2004> localVarResponse = await RoleUpdateAllAsyncWithHttpInfo(where, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update instances of the model matched by {{where}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2004)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> RoleUpdateAllAsyncWithHttpInfo (string where = null, Role data = null)
		{

			var localVarPath = "/roles/update";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpdateAll", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2004>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		public Role RoleUpsertPatchRoles (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleUpsertPatchRolesWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleUpsertPatchRolesWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertPatchRoles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleUpsertPatchRolesAsync (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleUpsertPatchRolesAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertPatchRolesAsyncWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertPatchRoles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Role</returns>
		public Role RoleUpsertPutRoles (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleUpsertPutRolesWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleUpsertPutRolesWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertPutRoles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleUpsertPutRolesAsync (Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleUpsertPutRolesAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch an existing model instance or insert a new one into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertPutRolesAsyncWithHttpInfo (Role data = null)
		{

			var localVarPath = "/roles";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertPutRoles", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Role</returns>
		public Role RoleUpsertWithWhere (string where = null, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = RoleUpsertWithWhereWithHttpInfo(where, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Role</returns>
		public ApiResponse< Role > RoleUpsertWithWhereWithHttpInfo (string where = null, Role data = null)
		{

			var localVarPath = "/roles/upsertWithWhere";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertWithWhere", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Role</returns>
		public async System.Threading.Tasks.Task<Role> RoleUpsertWithWhereAsync (string where = null, Role data = null)
		{
			 ApiResponse<Role> localVarResponse = await RoleUpsertWithWhereAsyncWithHttpInfo(where, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update an existing model instance or insert a new one into the data source based on the where criteria. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Role)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Role>> RoleUpsertWithWhereAsyncWithHttpInfo (string where = null, Role data = null)
		{

			var localVarPath = "/roles/upsertWithWhere";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("RoleUpsertWithWhere", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Role>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Role) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
			
		}

	}
}

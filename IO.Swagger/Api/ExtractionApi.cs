/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IExtractionApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Extraction</returns>
		Extraction ExtractionCreate (Extraction data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		ApiResponse<Extraction> ExtractionCreateWithHttpInfo (Extraction data = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		Object ExtractionDeleteById (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> ExtractionDeleteByIdWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Extraction&gt;</returns>
		List<Extraction> ExtractionFind (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Extraction&gt;</returns>
		ApiResponse<List<Extraction>> ExtractionFindWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Extraction</returns>
		Extraction ExtractionFindById (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		ApiResponse<Extraction> ExtractionFindByIdWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Extraction</returns>
		Extraction ExtractionFindOne (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		ApiResponse<Extraction> ExtractionFindOneWithHttpInfo (string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Extraction</returns>
		Extraction ExtractionPrototypeUpdateAttributesPatchExtractionsid (string id, Extraction data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		ApiResponse<Extraction> ExtractionPrototypeUpdateAttributesPatchExtractionsidWithHttpInfo (string id, Extraction data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Extraction</returns>
		Extraction ExtractionPrototypeUpdateAttributesPutExtractionsid (string id, Extraction data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		ApiResponse<Extraction> ExtractionPrototypeUpdateAttributesPutExtractionsidWithHttpInfo (string id, Extraction data = null);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Extraction</returns>
		System.Threading.Tasks.Task<Extraction> ExtractionCreateAsync (Extraction data = null);

		/// <summary>
		/// Create a new instance of the model and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionCreateAsyncWithHttpInfo (Extraction data = null);
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> ExtractionDeleteByIdAsync (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> ExtractionDeleteByIdAsyncWithHttpInfo (string id);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Extraction&gt;</returns>
		System.Threading.Tasks.Task<List<Extraction>> ExtractionFindAsync (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Extraction&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<Extraction>>> ExtractionFindAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Extraction</returns>
		System.Threading.Tasks.Task<Extraction> ExtractionFindByIdAsync (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionFindByIdAsyncWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Extraction</returns>
		System.Threading.Tasks.Task<Extraction> ExtractionFindOneAsync (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionFindOneAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Extraction</returns>
		System.Threading.Tasks.Task<Extraction> ExtractionPrototypeUpdateAttributesPatchExtractionsidAsync (string id, Extraction data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionPrototypeUpdateAttributesPatchExtractionsidAsyncWithHttpInfo (string id, Extraction data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Extraction</returns>
		System.Threading.Tasks.Task<Extraction> ExtractionPrototypeUpdateAttributesPutExtractionsidAsync (string id, Extraction data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionPrototypeUpdateAttributesPutExtractionsidAsyncWithHttpInfo (string id, Extraction data = null);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class ExtractionApi : IExtractionApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractionApi"/> class.
		/// </summary>
		/// <returns></returns>
		public ExtractionApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractionApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public ExtractionApi(Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration {get; set;}

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Extraction</returns>
		public Extraction ExtractionCreate (Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = ExtractionCreateWithHttpInfo(data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		public ApiResponse< Extraction > ExtractionCreateWithHttpInfo (Extraction data = null)
		{

			var localVarPath = "/extractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of Extraction</returns>
		public async System.Threading.Tasks.Task<Extraction> ExtractionCreateAsync (Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = await ExtractionCreateAsyncWithHttpInfo(data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Create a new instance of the model and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="data">Model instance data (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionCreateAsyncWithHttpInfo (Extraction data = null)
		{

			var localVarPath = "/extractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		public Object ExtractionDeleteById (string id)
		{
			 ApiResponse<Object> localVarResponse = ExtractionDeleteByIdWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > ExtractionDeleteByIdWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionDeleteById");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> ExtractionDeleteByIdAsync (string id)
		{
			 ApiResponse<Object> localVarResponse = await ExtractionDeleteByIdAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> ExtractionDeleteByIdAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionDeleteById");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Extraction&gt;</returns>
		public List<Extraction> ExtractionFind (string filter = null)
		{
			 ApiResponse<List<Extraction>> localVarResponse = ExtractionFindWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Extraction&gt;</returns>
		public ApiResponse< List<Extraction> > ExtractionFindWithHttpInfo (string filter = null)
		{

			var localVarPath = "/extractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Extraction>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Extraction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Extraction>)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Extraction&gt;</returns>
		public async System.Threading.Tasks.Task<List<Extraction>> ExtractionFindAsync (string filter = null)
		{
			 ApiResponse<List<Extraction>> localVarResponse = await ExtractionFindAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Extraction&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<Extraction>>> ExtractionFindAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/extractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Extraction>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Extraction>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Extraction>)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Extraction</returns>
		public Extraction ExtractionFindById (string id, string filter = null)
		{
			 ApiResponse<Extraction> localVarResponse = ExtractionFindByIdWithHttpInfo(id, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		public ApiResponse< Extraction > ExtractionFindByIdWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionFindById");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Extraction</returns>
		public async System.Threading.Tasks.Task<Extraction> ExtractionFindByIdAsync (string id, string filter = null)
		{
			 ApiResponse<Extraction> localVarResponse = await ExtractionFindByIdAsyncWithHttpInfo(id, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionFindByIdAsyncWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionFindById");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Extraction</returns>
		public Extraction ExtractionFindOne (string filter = null)
		{
			 ApiResponse<Extraction> localVarResponse = ExtractionFindOneWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		public ApiResponse< Extraction > ExtractionFindOneWithHttpInfo (string filter = null)
		{

			var localVarPath = "/extractions/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Extraction</returns>
		public async System.Threading.Tasks.Task<Extraction> ExtractionFindOneAsync (string filter = null)
		{
			 ApiResponse<Extraction> localVarResponse = await ExtractionFindOneAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionFindOneAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/extractions/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Extraction</returns>
		public Extraction ExtractionPrototypeUpdateAttributesPatchExtractionsid (string id, Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = ExtractionPrototypeUpdateAttributesPatchExtractionsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		public ApiResponse< Extraction > ExtractionPrototypeUpdateAttributesPatchExtractionsidWithHttpInfo (string id, Extraction data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionPrototypeUpdateAttributesPatchExtractionsid");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionPrototypeUpdateAttributesPatchExtractionsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Extraction</returns>
		public async System.Threading.Tasks.Task<Extraction> ExtractionPrototypeUpdateAttributesPatchExtractionsidAsync (string id, Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = await ExtractionPrototypeUpdateAttributesPatchExtractionsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionPrototypeUpdateAttributesPatchExtractionsidAsyncWithHttpInfo (string id, Extraction data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionPrototypeUpdateAttributesPatchExtractionsid");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionPrototypeUpdateAttributesPatchExtractionsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Extraction</returns>
		public Extraction ExtractionPrototypeUpdateAttributesPutExtractionsid (string id, Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = ExtractionPrototypeUpdateAttributesPutExtractionsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Extraction</returns>
		public ApiResponse< Extraction > ExtractionPrototypeUpdateAttributesPutExtractionsidWithHttpInfo (string id, Extraction data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionPrototypeUpdateAttributesPutExtractionsid");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionPrototypeUpdateAttributesPutExtractionsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Extraction</returns>
		public async System.Threading.Tasks.Task<Extraction> ExtractionPrototypeUpdateAttributesPutExtractionsidAsync (string id, Extraction data = null)
		{
			 ApiResponse<Extraction> localVarResponse = await ExtractionPrototypeUpdateAttributesPutExtractionsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">extraction id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Extraction)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Extraction>> ExtractionPrototypeUpdateAttributesPutExtractionsidAsyncWithHttpInfo (string id, Extraction data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling ExtractionApi->ExtractionPrototypeUpdateAttributesPutExtractionsid");

			var localVarPath = "/extractions/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("ExtractionPrototypeUpdateAttributesPutExtractionsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Extraction>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Extraction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Extraction)));
			
		}

	}
}

/* 
 * ata
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IJobApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Set validators for jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>bool?</returns>
		bool? JobAssignValidators (string filter);

		/// <summary>
		/// Set validators for jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>ApiResponse of bool?</returns>
		ApiResponse<bool?> JobAssignValidatorsWithHttpInfo (string filter);
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		InlineResponse2001 JobCount (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		ApiResponse<InlineResponse2001> JobCountWithHttpInfo (string where = null);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>object</returns>
		object JobCustomCreate ();

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of object</returns>
		ApiResponse<object> JobCustomCreateWithHttpInfo ();
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		Object JobDeleteById (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobDeleteByIdWithHttpInfo (string id);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>string</returns>
		string JobDeleteErrors (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobDeleteErrorsWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);
		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		string JobDeleteMany (string filter = null);

		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobDeleteManyWithHttpInfo (string filter = null);
		/// <summary>
		/// Download job file
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Object</returns>
		Object JobDownloadDocument (string id);

		/// <summary>
		/// Download job file
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobDownloadDocumentWithHttpInfo (string id);
		/// <summary>
		/// get job entry by type
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Object</returns>
		Object JobEntry (string jobId = null, string type = null, string name = null);

		/// <summary>
		/// get job entry by type
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobEntryWithHttpInfo (string jobId = null, string type = null, string name = null);
		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Object</returns>
		Object JobEscalatedCount (string filter = null);

		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobEscalatedCountWithHttpInfo (string filter = null);
		/// <summary>
		/// Get validation based on organizations
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>InlineResponse2002</returns>
		InlineResponse2002 JobExport (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null);

		/// <summary>
		/// Get validation based on organizations
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>ApiResponse of InlineResponse2002</returns>
		ApiResponse<InlineResponse2002> JobExportWithHttpInfo (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null);
		/// <summary>
		/// Filter and paginate jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Object</returns>
		Object JobFilter (string filter);

		/// <summary>
		/// Filter and paginate jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobFilterWithHttpInfo (string filter);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Job&gt;</returns>
		List<Job> JobFind (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Job&gt;</returns>
		ApiResponse<List<Job>> JobFindWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Job</returns>
		Job JobFindById (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		ApiResponse<Job> JobFindByIdWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Job</returns>
		Job JobFindOne (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		ApiResponse<Job> JobFindOneWithHttpInfo (string filter = null);
		/// <summary>
		/// Get unassigned jobs by Project ID
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>double?</returns>
		double? JobGetUnassignedDocs (string options = null);

		/// <summary>
		/// Get unassigned jobs by Project ID
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of double?</returns>
		ApiResponse<double?> JobGetUnassignedDocsWithHttpInfo (string options = null);
		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>List&lt;object&gt;</returns>
		List<object> JobPossibleFilterCounts (string filter = null, string variants = null);

		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		ApiResponse<List<object>> JobPossibleFilterCountsWithHttpInfo (string filter = null, string variants = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Job</returns>
		Job JobPrototypeUpdateAttributesPatchJobsid (string id, Job data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		ApiResponse<Job> JobPrototypeUpdateAttributesPatchJobsidWithHttpInfo (string id, Job data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Job</returns>
		Job JobPrototypeUpdateAttributesPutJobsid (string id, Job data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		ApiResponse<Job> JobPrototypeUpdateAttributesPutJobsidWithHttpInfo (string id, Job data = null);
		/// <summary>
		/// Get ready to export jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Object</returns>
		Object JobReadyToExport (string options = null);

		/// <summary>
		/// Get ready to export jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobReadyToExportWithHttpInfo (string options = null);
		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Object</returns>
		Object JobReport (string filter = null);

		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobReportWithHttpInfo (string filter = null);
		/// <summary>
		/// restore job from trash can
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		string JobRestore (string filter = null);

		/// <summary>
		/// restore job from trash can
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobRestoreWithHttpInfo (string filter = null);
		/// <summary>
		/// Restore Fake Data
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>string</returns>
		string JobRestoreFakeData (string options = null);

		/// <summary>
		/// Restore Fake Data
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobRestoreFakeDataWithHttpInfo (string options = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>string</returns>
		string JobSaveEntry (string options = null, string jobId = null, string entry = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobSaveEntryWithHttpInfo (string options = null, string jobId = null, string entry = null);
		/// <summary>
		/// Send Report
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>string</returns>
		string JobSendReport (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);

		/// <summary>
		/// Send Report
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobSendReportWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		string JobUpdateDocType (string options = null, string entry = null, string filter = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobUpdateDocTypeWithHttpInfo (string options = null, string entry = null, string filter = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>string</returns>
		string JobUpdateExtractions (string documents = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobUpdateExtractionsWithHttpInfo (string documents = null);
		/// <summary>
		/// Update Jobs Level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>string</returns>
		string JobUpdateLevel (string filter, double? level);

		/// <summary>
		/// Update Jobs Level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobUpdateLevelWithHttpInfo (string filter, double? level);
		/// <summary>
		/// Update Jobs Status
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>string</returns>
		string JobUpdateStatus (string filter, string status);

		/// <summary>
		/// Update Jobs Status
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>ApiResponse of string</returns>
		ApiResponse<string> JobUpdateStatusWithHttpInfo (string filter, string status);
		/// <summary>
		/// get job data for validation
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Object</returns>
		Object JobValidation (string id = null, string filter = null, string extractorType = null);

		/// <summary>
		/// get job data for validation
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		ApiResponse<Object> JobValidationWithHttpInfo (string id = null, string filter = null, string extractorType = null);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Set validators for jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of bool?</returns>
		System.Threading.Tasks.Task<bool?> JobAssignValidatorsAsync (string filter);

		/// <summary>
		/// Set validators for jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of ApiResponse (bool?)</returns>
		System.Threading.Tasks.Task<ApiResponse<bool?>> JobAssignValidatorsAsyncWithHttpInfo (string filter);
		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		System.Threading.Tasks.Task<InlineResponse2001> JobCountAsync (string where = null);

		/// <summary>
		/// Count instances of the model matched by where from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> JobCountAsyncWithHttpInfo (string where = null);
		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of object</returns>
		System.Threading.Tasks.Task<object> JobCustomCreateAsync ();

		/// <summary>
		/// 
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (object)</returns>
		System.Threading.Tasks.Task<ApiResponse<object>> JobCustomCreateAsyncWithHttpInfo ();
		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobDeleteByIdAsync (string id);

		/// <summary>
		/// Delete a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobDeleteByIdAsyncWithHttpInfo (string id);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobDeleteErrorsAsync (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobDeleteErrorsAsyncWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);
		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobDeleteManyAsync (string filter = null);

		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobDeleteManyAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Download job file
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobDownloadDocumentAsync (string id);

		/// <summary>
		/// Download job file
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobDownloadDocumentAsyncWithHttpInfo (string id);
		/// <summary>
		/// get job entry by type
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobEntryAsync (string jobId = null, string type = null, string name = null);

		/// <summary>
		/// get job entry by type
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobEntryAsyncWithHttpInfo (string jobId = null, string type = null, string name = null);
		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobEscalatedCountAsync (string filter = null);

		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobEscalatedCountAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Get validation based on organizations
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>Task of InlineResponse2002</returns>
		System.Threading.Tasks.Task<InlineResponse2002> JobExportAsync (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null);

		/// <summary>
		/// Get validation based on organizations
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2002)</returns>
		System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> JobExportAsyncWithHttpInfo (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null);
		/// <summary>
		/// Filter and paginate jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobFilterAsync (string filter);

		/// <summary>
		/// Filter and paginate jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobFilterAsyncWithHttpInfo (string filter);
		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Job&gt;</returns>
		System.Threading.Tasks.Task<List<Job>> JobFindAsync (string filter = null);

		/// <summary>
		/// Find all instances of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<Job>>> JobFindAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Job</returns>
		System.Threading.Tasks.Task<Job> JobFindByIdAsync (string id, string filter = null);

		/// <summary>
		/// Find a model instance by {{id}} from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		System.Threading.Tasks.Task<ApiResponse<Job>> JobFindByIdAsyncWithHttpInfo (string id, string filter = null);
		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Job</returns>
		System.Threading.Tasks.Task<Job> JobFindOneAsync (string filter = null);

		/// <summary>
		/// Find first instance of the model matched by filter from the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		System.Threading.Tasks.Task<ApiResponse<Job>> JobFindOneAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Get unassigned jobs by Project ID
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of double?</returns>
		System.Threading.Tasks.Task<double?> JobGetUnassignedDocsAsync (string options = null);

		/// <summary>
		/// Get unassigned jobs by Project ID
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (double?)</returns>
		System.Threading.Tasks.Task<ApiResponse<double?>> JobGetUnassignedDocsAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>Task of List&lt;object&gt;</returns>
		System.Threading.Tasks.Task<List<object>> JobPossibleFilterCountsAsync (string filter = null, string variants = null);

		/// <summary>
		/// get count of jobs which escalated to high level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<object>>> JobPossibleFilterCountsAsyncWithHttpInfo (string filter = null, string variants = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Job</returns>
		System.Threading.Tasks.Task<Job> JobPrototypeUpdateAttributesPatchJobsidAsync (string id, Job data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		System.Threading.Tasks.Task<ApiResponse<Job>> JobPrototypeUpdateAttributesPatchJobsidAsyncWithHttpInfo (string id, Job data = null);
		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Job</returns>
		System.Threading.Tasks.Task<Job> JobPrototypeUpdateAttributesPutJobsidAsync (string id, Job data = null);

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		System.Threading.Tasks.Task<ApiResponse<Job>> JobPrototypeUpdateAttributesPutJobsidAsyncWithHttpInfo (string id, Job data = null);
		/// <summary>
		/// Get ready to export jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobReadyToExportAsync (string options = null);

		/// <summary>
		/// Get ready to export jobs
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobReadyToExportAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobReportAsync (string filter = null);

		/// <summary>
		/// get job results
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobReportAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// restore job from trash can
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobRestoreAsync (string filter = null);

		/// <summary>
		/// restore job from trash can
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobRestoreAsyncWithHttpInfo (string filter = null);
		/// <summary>
		/// Restore Fake Data
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobRestoreFakeDataAsync (string options = null);

		/// <summary>
		/// Restore Fake Data
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobRestoreFakeDataAsyncWithHttpInfo (string options = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobSaveEntryAsync (string options = null, string jobId = null, string entry = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobSaveEntryAsyncWithHttpInfo (string options = null, string jobId = null, string entry = null);
		/// <summary>
		/// Send Report
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobSendReportAsync (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);

		/// <summary>
		/// Send Report
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobSendReportAsyncWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobUpdateDocTypeAsync (string options = null, string entry = null, string filter = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateDocTypeAsyncWithHttpInfo (string options = null, string entry = null, string filter = null);
		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobUpdateExtractionsAsync (string documents = null);

		/// <summary>
		/// Save Job Result Entry
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateExtractionsAsyncWithHttpInfo (string documents = null);
		/// <summary>
		/// Update Jobs Level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobUpdateLevelAsync (string filter, double? level);

		/// <summary>
		/// Update Jobs Level
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateLevelAsyncWithHttpInfo (string filter, double? level);
		/// <summary>
		/// Update Jobs Status
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>Task of string</returns>
		System.Threading.Tasks.Task<string> JobUpdateStatusAsync (string filter, string status);

		/// <summary>
		/// Update Jobs Status
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>Task of ApiResponse (string)</returns>
		System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateStatusAsyncWithHttpInfo (string filter, string status);
		/// <summary>
		/// get job data for validation
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Task of Object</returns>
		System.Threading.Tasks.Task<Object> JobValidationAsync (string id = null, string filter = null, string extractorType = null);

		/// <summary>
		/// get job data for validation
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> JobValidationAsyncWithHttpInfo (string id = null, string filter = null, string extractorType = null);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class JobApi : IJobApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="JobApi"/> class.
		/// </summary>
		/// <returns></returns>
		public JobApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public JobApi(Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration {get; set;}

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Set validators for jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>bool?</returns>
		public bool? JobAssignValidators (string filter)
		{
			 ApiResponse<bool?> localVarResponse = JobAssignValidatorsWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Set validators for jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>ApiResponse of bool?</returns>
		public ApiResponse< bool? > JobAssignValidatorsWithHttpInfo (string filter)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobAssignValidators");

			var localVarPath = "/jobs/assign-validators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobAssignValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<bool?>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
			
		}

		/// <summary>
		/// Set validators for jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of bool?</returns>
		public async System.Threading.Tasks.Task<bool?> JobAssignValidatorsAsync (string filter)
		{
			 ApiResponse<bool?> localVarResponse = await JobAssignValidatorsAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Set validators for jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of ApiResponse (bool?)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<bool?>> JobAssignValidatorsAsyncWithHttpInfo (string filter)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobAssignValidators");

			var localVarPath = "/jobs/assign-validators";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobAssignValidators", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<bool?>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
			
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>InlineResponse2001</returns>
		public InlineResponse2001 JobCount (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = JobCountWithHttpInfo(where);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>ApiResponse of InlineResponse2001</returns>
		public ApiResponse< InlineResponse2001 > JobCountWithHttpInfo (string where = null)
		{

			var localVarPath = "/jobs/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of InlineResponse2001</returns>
		public async System.Threading.Tasks.Task<InlineResponse2001> JobCountAsync (string where = null)
		{
			 ApiResponse<InlineResponse2001> localVarResponse = await JobCountAsyncWithHttpInfo(where);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Count instances of the model matched by where from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="where">Criteria to match model instances (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2001)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> JobCountAsyncWithHttpInfo (string where = null)
		{

			var localVarPath = "/jobs/count";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2001>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>object</returns>
		public object JobCustomCreate ()
		{
			 ApiResponse<object> localVarResponse = JobCustomCreateWithHttpInfo();
			 return localVarResponse.Data;
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of object</returns>
		public ApiResponse< object > JobCustomCreateWithHttpInfo ()
		{

			var localVarPath = "/jobs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobCustomCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
			
		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of object</returns>
		public async System.Threading.Tasks.Task<object> JobCustomCreateAsync ()
		{
			 ApiResponse<object> localVarResponse = await JobCustomCreateAsyncWithHttpInfo();
			 return localVarResponse.Data;

		}

		/// <summary>
		///  
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<object>> JobCustomCreateAsyncWithHttpInfo ()
		{

			var localVarPath = "/jobs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobCustomCreate", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Object</returns>
		public Object JobDeleteById (string id)
		{
			 ApiResponse<Object> localVarResponse = JobDeleteByIdWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobDeleteByIdWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobDeleteById");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobDeleteByIdAsync (string id)
		{
			 ApiResponse<Object> localVarResponse = await JobDeleteByIdAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Delete a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobDeleteByIdAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobDeleteById");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>string</returns>
		public string JobDeleteErrors (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{
			 ApiResponse<string> localVarResponse = JobDeleteErrorsWithHttpInfo(all, project, include, exclude, type, email, comment, shouldDelete);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobDeleteErrorsWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{

			var localVarPath = "/jobs/deleteErrors";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (all != null) localVarFormParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // form parameter
			if (project != null) localVarFormParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // form parameter
			if (include != null) localVarFormParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // form parameter
			if (exclude != null) localVarFormParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // form parameter
			if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
			if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
			if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
			if (shouldDelete != null) localVarFormParams.Add("shouldDelete", Configuration.ApiClient.ParameterToString(shouldDelete)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteErrors", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobDeleteErrorsAsync (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{
			 ApiResponse<string> localVarResponse = await JobDeleteErrorsAsyncWithHttpInfo(all, project, include, exclude, type, email, comment, shouldDelete);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobDeleteErrorsAsyncWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{

			var localVarPath = "/jobs/deleteErrors";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (all != null) localVarFormParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // form parameter
			if (project != null) localVarFormParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // form parameter
			if (include != null) localVarFormParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // form parameter
			if (exclude != null) localVarFormParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // form parameter
			if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
			if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
			if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
			if (shouldDelete != null) localVarFormParams.Add("shouldDelete", Configuration.ApiClient.ParameterToString(shouldDelete)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteErrors", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		public string JobDeleteMany (string filter = null)
		{
			 ApiResponse<string> localVarResponse = JobDeleteManyWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobDeleteManyWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/deleteMany";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteMany", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobDeleteManyAsync (string filter = null)
		{
			 ApiResponse<string> localVarResponse = await JobDeleteManyAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobDeleteManyAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/deleteMany";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDeleteMany", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Download job file 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Object</returns>
		public Object JobDownloadDocument (string id)
		{
			 ApiResponse<Object> localVarResponse = JobDownloadDocumentWithHttpInfo(id);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Download job file 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobDownloadDocumentWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobDownloadDocument");

			var localVarPath = "/jobs/{id}/downloadDocument";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDownloadDocument", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Download job file 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobDownloadDocumentAsync (string id)
		{
			 ApiResponse<Object> localVarResponse = await JobDownloadDocumentAsyncWithHttpInfo(id);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Download job file 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"></param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobDownloadDocumentAsyncWithHttpInfo (string id)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobDownloadDocument");

			var localVarPath = "/jobs/{id}/downloadDocument";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobDownloadDocument", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get job entry by type 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Object</returns>
		public Object JobEntry (string jobId = null, string type = null, string name = null)
		{
			 ApiResponse<Object> localVarResponse = JobEntryWithHttpInfo(jobId, type, name);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get job entry by type 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobEntryWithHttpInfo (string jobId = null, string type = null, string name = null)
		{

			var localVarPath = "/jobs/entry";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
			if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
			if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobEntry", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get job entry by type 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobEntryAsync (string jobId = null, string type = null, string name = null)
		{
			 ApiResponse<Object> localVarResponse = await JobEntryAsyncWithHttpInfo(jobId, type, name);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get job entry by type 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="jobId"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobEntryAsyncWithHttpInfo (string jobId = null, string type = null, string name = null)
		{

			var localVarPath = "/jobs/entry";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (jobId != null) localVarQueryParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // query parameter
			if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
			if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobEntry", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Object</returns>
		public Object JobEscalatedCount (string filter = null)
		{
			 ApiResponse<Object> localVarResponse = JobEscalatedCountWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobEscalatedCountWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/escalatedCount";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobEscalatedCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobEscalatedCountAsync (string filter = null)
		{
			 ApiResponse<Object> localVarResponse = await JobEscalatedCountAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobEscalatedCountAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/escalatedCount";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobEscalatedCount", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Get validation based on organizations 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>InlineResponse2002</returns>
		public InlineResponse2002 JobExport (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null)
		{
			 ApiResponse<InlineResponse2002> localVarResponse = JobExportWithHttpInfo(documentType, validator, exportFormat, include, exclude, all, projects, organisations);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Get validation based on organizations 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>ApiResponse of InlineResponse2002</returns>
		public ApiResponse< InlineResponse2002 > JobExportWithHttpInfo (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null)
		{

			var localVarPath = "/jobs/export";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (documentType != null) localVarQueryParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // query parameter
			if (validator != null) localVarQueryParams.Add("validator", Configuration.ApiClient.ParameterToString(validator)); // query parameter
			if (exportFormat != null) localVarQueryParams.Add("exportFormat", Configuration.ApiClient.ParameterToString(exportFormat)); // query parameter
			if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
			if (exclude != null) localVarQueryParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // query parameter
			if (all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // query parameter
			if (projects != null) localVarQueryParams.Add("projects", Configuration.ApiClient.ParameterToString(projects)); // query parameter
			if (organisations != null) localVarQueryParams.Add("organisations", Configuration.ApiClient.ParameterToString(organisations)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobExport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2002>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
			
		}

		/// <summary>
		/// Get validation based on organizations 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>Task of InlineResponse2002</returns>
		public async System.Threading.Tasks.Task<InlineResponse2002> JobExportAsync (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null)
		{
			 ApiResponse<InlineResponse2002> localVarResponse = await JobExportAsyncWithHttpInfo(documentType, validator, exportFormat, include, exclude, all, projects, organisations);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Get validation based on organizations 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documentType"> (optional)</param>
		/// <param name="validator"> (optional)</param>
		/// <param name="exportFormat"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="all"> (optional)</param>
		/// <param name="projects"> (optional)</param>
		/// <param name="organisations"> (optional)</param>
		/// <returns>Task of ApiResponse (InlineResponse2002)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> JobExportAsyncWithHttpInfo (string documentType = null, string validator = null, string exportFormat = null, string include = null, string exclude = null, bool? all = null, string projects = null, string organisations = null)
		{

			var localVarPath = "/jobs/export";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (documentType != null) localVarQueryParams.Add("documentType", Configuration.ApiClient.ParameterToString(documentType)); // query parameter
			if (validator != null) localVarQueryParams.Add("validator", Configuration.ApiClient.ParameterToString(validator)); // query parameter
			if (exportFormat != null) localVarQueryParams.Add("exportFormat", Configuration.ApiClient.ParameterToString(exportFormat)); // query parameter
			if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
			if (exclude != null) localVarQueryParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // query parameter
			if (all != null) localVarQueryParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // query parameter
			if (projects != null) localVarQueryParams.Add("projects", Configuration.ApiClient.ParameterToString(projects)); // query parameter
			if (organisations != null) localVarQueryParams.Add("organisations", Configuration.ApiClient.ParameterToString(organisations)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobExport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<InlineResponse2002>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
			
		}

		/// <summary>
		/// Filter and paginate jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Object</returns>
		public Object JobFilter (string filter)
		{
			 ApiResponse<Object> localVarResponse = JobFilterWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Filter and paginate jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobFilterWithHttpInfo (string filter)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobFilter");

			var localVarPath = "/jobs/filter";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFilter", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Filter and paginate jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobFilterAsync (string filter)
		{
			 ApiResponse<Object> localVarResponse = await JobFilterAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Filter and paginate jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobFilterAsyncWithHttpInfo (string filter)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobFilter");

			var localVarPath = "/jobs/filter";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFilter", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>List&lt;Job&gt;</returns>
		public List<Job> JobFind (string filter = null)
		{
			 ApiResponse<List<Job>> localVarResponse = JobFindWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of List&lt;Job&gt;</returns>
		public ApiResponse< List<Job> > JobFindWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Job>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
			
		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of List&lt;Job&gt;</returns>
		public async System.Threading.Tasks.Task<List<Job>> JobFindAsync (string filter = null)
		{
			 ApiResponse<List<Job>> localVarResponse = await JobFindAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find all instances of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<Job>>> JobFindAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFind", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Job>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Job</returns>
		public Job JobFindById (string id, string filter = null)
		{
			 ApiResponse<Job> localVarResponse = JobFindByIdWithHttpInfo(id, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		public ApiResponse< Job > JobFindByIdWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobFindById");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of Job</returns>
		public async System.Threading.Tasks.Task<Job> JobFindByIdAsync (string id, string filter = null)
		{
			 ApiResponse<Job> localVarResponse = await JobFindByIdAsyncWithHttpInfo(id, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find a model instance by {{id}} from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">Model id</param>
		/// <param name="filter">Filter defining fields and include (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Job>> JobFindByIdAsyncWithHttpInfo (string id, string filter = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobFindById");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFindById", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Job</returns>
		public Job JobFindOne (string filter = null)
		{
			 ApiResponse<Job> localVarResponse = JobFindOneWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		public ApiResponse< Job > JobFindOneWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of Job</returns>
		public async System.Threading.Tasks.Task<Job> JobFindOneAsync (string filter = null)
		{
			 ApiResponse<Job> localVarResponse = await JobFindOneAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Find first instance of the model matched by filter from the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter">Filter defining fields, where, include, order, offset, and limit (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Job>> JobFindOneAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/findOne";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobFindOne", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Get unassigned jobs by Project ID 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>double?</returns>
		public double? JobGetUnassignedDocs (string options = null)
		{
			 ApiResponse<double?> localVarResponse = JobGetUnassignedDocsWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Get unassigned jobs by Project ID 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of double?</returns>
		public ApiResponse< double? > JobGetUnassignedDocsWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/getUnassignedDocs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobGetUnassignedDocs", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<double?>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(double?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(double?)));
			
		}

		/// <summary>
		/// Get unassigned jobs by Project ID 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of double?</returns>
		public async System.Threading.Tasks.Task<double?> JobGetUnassignedDocsAsync (string options = null)
		{
			 ApiResponse<double?> localVarResponse = await JobGetUnassignedDocsAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Get unassigned jobs by Project ID 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (double?)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<double?>> JobGetUnassignedDocsAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/getUnassignedDocs";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobGetUnassignedDocs", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<double?>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(double?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(double?)));
			
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>List&lt;object&gt;</returns>
		public List<object> JobPossibleFilterCounts (string filter = null, string variants = null)
		{
			 ApiResponse<List<object>> localVarResponse = JobPossibleFilterCountsWithHttpInfo(filter, variants);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>ApiResponse of List&lt;object&gt;</returns>
		public ApiResponse< List<object> > JobPossibleFilterCountsWithHttpInfo (string filter = null, string variants = null)
		{

			var localVarPath = "/jobs/possibleFilterCounts";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
			if (variants != null) localVarQueryParams.Add("variants", Configuration.ApiClient.ParameterToString(variants)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPossibleFilterCounts", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>Task of List&lt;object&gt;</returns>
		public async System.Threading.Tasks.Task<List<object>> JobPossibleFilterCountsAsync (string filter = null, string variants = null)
		{
			 ApiResponse<List<object>> localVarResponse = await JobPossibleFilterCountsAsyncWithHttpInfo(filter, variants);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get count of jobs which escalated to high level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <param name="variants"> (optional)</param>
		/// <returns>Task of ApiResponse (List&lt;object&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<object>>> JobPossibleFilterCountsAsyncWithHttpInfo (string filter = null, string variants = null)
		{

			var localVarPath = "/jobs/possibleFilterCounts";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
			if (variants != null) localVarQueryParams.Add("variants", Configuration.ApiClient.ParameterToString(variants)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPossibleFilterCounts", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<object>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Job</returns>
		public Job JobPrototypeUpdateAttributesPatchJobsid (string id, Job data = null)
		{
			 ApiResponse<Job> localVarResponse = JobPrototypeUpdateAttributesPatchJobsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		public ApiResponse< Job > JobPrototypeUpdateAttributesPatchJobsidWithHttpInfo (string id, Job data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobPrototypeUpdateAttributesPatchJobsid");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPrototypeUpdateAttributesPatchJobsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Job</returns>
		public async System.Threading.Tasks.Task<Job> JobPrototypeUpdateAttributesPatchJobsidAsync (string id, Job data = null)
		{
			 ApiResponse<Job> localVarResponse = await JobPrototypeUpdateAttributesPatchJobsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Job>> JobPrototypeUpdateAttributesPatchJobsidAsyncWithHttpInfo (string id, Job data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobPrototypeUpdateAttributesPatchJobsid");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPrototypeUpdateAttributesPatchJobsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Job</returns>
		public Job JobPrototypeUpdateAttributesPutJobsid (string id, Job data = null)
		{
			 ApiResponse<Job> localVarResponse = JobPrototypeUpdateAttributesPutJobsidWithHttpInfo(id, data);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>ApiResponse of Job</returns>
		public ApiResponse< Job > JobPrototypeUpdateAttributesPutJobsidWithHttpInfo (string id, Job data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobPrototypeUpdateAttributesPutJobsid");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPrototypeUpdateAttributesPutJobsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of Job</returns>
		public async System.Threading.Tasks.Task<Job> JobPrototypeUpdateAttributesPutJobsidAsync (string id, Job data = null)
		{
			 ApiResponse<Job> localVarResponse = await JobPrototypeUpdateAttributesPutJobsidAsyncWithHttpInfo(id, data);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Patch attributes for a model instance and persist it into the data source. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id">job id</param>
		/// <param name="data">An object of model property name/value pairs (optional)</param>
		/// <returns>Task of ApiResponse (Job)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Job>> JobPrototypeUpdateAttributesPutJobsidAsyncWithHttpInfo (string id, Job data = null)
		{
			// verify the required parameter 'id' is set
			if (id == null)
				throw new ApiException(400, "Missing required parameter 'id' when calling JobApi->JobPrototypeUpdateAttributesPutJobsid");

			var localVarPath = "/jobs/{id}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
			if (data != null && data.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
			}
			else
			{
				localVarPostBody = data; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobPrototypeUpdateAttributesPutJobsid", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Job>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
			
		}

		/// <summary>
		/// Get ready to export jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Object</returns>
		public Object JobReadyToExport (string options = null)
		{
			 ApiResponse<Object> localVarResponse = JobReadyToExportWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Get ready to export jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobReadyToExportWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/readyToExport";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobReadyToExport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// Get ready to export jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobReadyToExportAsync (string options = null)
		{
			 ApiResponse<Object> localVarResponse = await JobReadyToExportAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Get ready to export jobs 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobReadyToExportAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/readyToExport";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobReadyToExport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Object</returns>
		public Object JobReport (string filter = null)
		{
			 ApiResponse<Object> localVarResponse = JobReportWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobReportWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/report";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobReport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobReportAsync (string filter = null)
		{
			 ApiResponse<Object> localVarResponse = await JobReportAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get job results 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobReportAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/report";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobReport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// restore job from trash can 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		public string JobRestore (string filter = null)
		{
			 ApiResponse<string> localVarResponse = JobRestoreWithHttpInfo(filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// restore job from trash can 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobRestoreWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/restore";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobRestore", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// restore job from trash can 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobRestoreAsync (string filter = null)
		{
			 ApiResponse<string> localVarResponse = await JobRestoreAsyncWithHttpInfo(filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// restore job from trash can 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobRestoreAsyncWithHttpInfo (string filter = null)
		{

			var localVarPath = "/jobs/restore";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobRestore", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Restore Fake Data 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>string</returns>
		public string JobRestoreFakeData (string options = null)
		{
			 ApiResponse<string> localVarResponse = JobRestoreFakeDataWithHttpInfo(options);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Restore Fake Data 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobRestoreFakeDataWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/restoreFakeData";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobRestoreFakeData", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Restore Fake Data 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobRestoreFakeDataAsync (string options = null)
		{
			 ApiResponse<string> localVarResponse = await JobRestoreFakeDataAsyncWithHttpInfo(options);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Restore Fake Data 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobRestoreFakeDataAsyncWithHttpInfo (string options = null)
		{

			var localVarPath = "/jobs/restoreFakeData";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobRestoreFakeData", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>string</returns>
		public string JobSaveEntry (string options = null, string jobId = null, string entry = null)
		{
			 ApiResponse<string> localVarResponse = JobSaveEntryWithHttpInfo(options, jobId, entry);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobSaveEntryWithHttpInfo (string options = null, string jobId = null, string entry = null)
		{

			var localVarPath = "/jobs/saveEntry";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
			if (jobId != null) localVarFormParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // form parameter
			if (entry != null) localVarFormParams.Add("entry", Configuration.ApiClient.ParameterToString(entry)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobSaveEntry", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobSaveEntryAsync (string options = null, string jobId = null, string entry = null)
		{
			 ApiResponse<string> localVarResponse = await JobSaveEntryAsyncWithHttpInfo(options, jobId, entry);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="jobId"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobSaveEntryAsyncWithHttpInfo (string options = null, string jobId = null, string entry = null)
		{

			var localVarPath = "/jobs/saveEntry";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
			if (jobId != null) localVarFormParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // form parameter
			if (entry != null) localVarFormParams.Add("entry", Configuration.ApiClient.ParameterToString(entry)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobSaveEntry", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Send Report 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>string</returns>
		public string JobSendReport (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{
			 ApiResponse<string> localVarResponse = JobSendReportWithHttpInfo(all, project, include, exclude, type, email, comment, shouldDelete);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Send Report 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobSendReportWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{

			var localVarPath = "/jobs/sendReport";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (all != null) localVarFormParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // form parameter
			if (project != null) localVarFormParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // form parameter
			if (include != null) localVarFormParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // form parameter
			if (exclude != null) localVarFormParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // form parameter
			if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
			if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
			if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
			if (shouldDelete != null) localVarFormParams.Add("shouldDelete", Configuration.ApiClient.ParameterToString(shouldDelete)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobSendReport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Send Report 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobSendReportAsync (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{
			 ApiResponse<string> localVarResponse = await JobSendReportAsyncWithHttpInfo(all, project, include, exclude, type, email, comment, shouldDelete);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Send Report 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="all"> (optional)</param>
		/// <param name="project"> (optional)</param>
		/// <param name="include"> (optional)</param>
		/// <param name="exclude"> (optional)</param>
		/// <param name="type"> (optional)</param>
		/// <param name="email"> (optional)</param>
		/// <param name="comment"> (optional)</param>
		/// <param name="shouldDelete"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobSendReportAsyncWithHttpInfo (bool? all = null, string project = null, string include = null, string exclude = null, string type = null, string email = null, string comment = null, bool? shouldDelete = null)
		{

			var localVarPath = "/jobs/sendReport";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (all != null) localVarFormParams.Add("all", Configuration.ApiClient.ParameterToString(all)); // form parameter
			if (project != null) localVarFormParams.Add("project", Configuration.ApiClient.ParameterToString(project)); // form parameter
			if (include != null) localVarFormParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // form parameter
			if (exclude != null) localVarFormParams.Add("exclude", Configuration.ApiClient.ParameterToString(exclude)); // form parameter
			if (type != null) localVarFormParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // form parameter
			if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter
			if (comment != null) localVarFormParams.Add("comment", Configuration.ApiClient.ParameterToString(comment)); // form parameter
			if (shouldDelete != null) localVarFormParams.Add("shouldDelete", Configuration.ApiClient.ParameterToString(shouldDelete)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobSendReport", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>string</returns>
		public string JobUpdateDocType (string options = null, string entry = null, string filter = null)
		{
			 ApiResponse<string> localVarResponse = JobUpdateDocTypeWithHttpInfo(options, entry, filter);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobUpdateDocTypeWithHttpInfo (string options = null, string entry = null, string filter = null)
		{

			var localVarPath = "/jobs/updateDocType";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
			if (entry != null) localVarFormParams.Add("entry", Configuration.ApiClient.ParameterToString(entry)); // form parameter
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateDocType", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobUpdateDocTypeAsync (string options = null, string entry = null, string filter = null)
		{
			 ApiResponse<string> localVarResponse = await JobUpdateDocTypeAsyncWithHttpInfo(options, entry, filter);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="options"> (optional)</param>
		/// <param name="entry"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateDocTypeAsyncWithHttpInfo (string options = null, string entry = null, string filter = null)
		{

			var localVarPath = "/jobs/updateDocType";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter
			if (entry != null) localVarFormParams.Add("entry", Configuration.ApiClient.ParameterToString(entry)); // form parameter
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateDocType", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>string</returns>
		public string JobUpdateExtractions (string documents = null)
		{
			 ApiResponse<string> localVarResponse = JobUpdateExtractionsWithHttpInfo(documents);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobUpdateExtractionsWithHttpInfo (string documents = null)
		{

			var localVarPath = "/jobs/updateExtractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (documents != null) localVarFormParams.Add("documents", Configuration.ApiClient.ParameterToString(documents)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateExtractions", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobUpdateExtractionsAsync (string documents = null)
		{
			 ApiResponse<string> localVarResponse = await JobUpdateExtractionsAsyncWithHttpInfo(documents);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Save Job Result Entry 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="documents"> (optional)</param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateExtractionsAsyncWithHttpInfo (string documents = null)
		{

			var localVarPath = "/jobs/updateExtractions";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (documents != null) localVarFormParams.Add("documents", Configuration.ApiClient.ParameterToString(documents)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateExtractions", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Update Jobs Level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>string</returns>
		public string JobUpdateLevel (string filter, double? level)
		{
			 ApiResponse<string> localVarResponse = JobUpdateLevelWithHttpInfo(filter, level);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update Jobs Level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobUpdateLevelWithHttpInfo (string filter, double? level)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobUpdateLevel");
			// verify the required parameter 'level' is set
			if (level == null)
				throw new ApiException(400, "Missing required parameter 'level' when calling JobApi->JobUpdateLevel");

			var localVarPath = "/jobs/updateLevel";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter
			if (level != null) localVarFormParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateLevel", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Update Jobs Level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobUpdateLevelAsync (string filter, double? level)
		{
			 ApiResponse<string> localVarResponse = await JobUpdateLevelAsyncWithHttpInfo(filter, level);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update Jobs Level 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="level"></param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateLevelAsyncWithHttpInfo (string filter, double? level)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobUpdateLevel");
			// verify the required parameter 'level' is set
			if (level == null)
				throw new ApiException(400, "Missing required parameter 'level' when calling JobApi->JobUpdateLevel");

			var localVarPath = "/jobs/updateLevel";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter
			if (level != null) localVarFormParams.Add("level", Configuration.ApiClient.ParameterToString(level)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateLevel", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Update Jobs Status 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>string</returns>
		public string JobUpdateStatus (string filter, string status)
		{
			 ApiResponse<string> localVarResponse = JobUpdateStatusWithHttpInfo(filter, status);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// Update Jobs Status 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>ApiResponse of string</returns>
		public ApiResponse< string > JobUpdateStatusWithHttpInfo (string filter, string status)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobUpdateStatus");
			// verify the required parameter 'status' is set
			if (status == null)
				throw new ApiException(400, "Missing required parameter 'status' when calling JobApi->JobUpdateStatus");

			var localVarPath = "/jobs/updateStatus";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter
			if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateStatus", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// Update Jobs Status 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>Task of string</returns>
		public async System.Threading.Tasks.Task<string> JobUpdateStatusAsync (string filter, string status)
		{
			 ApiResponse<string> localVarResponse = await JobUpdateStatusAsyncWithHttpInfo(filter, status);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// Update Jobs Status 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="filter"></param>
		/// <param name="status"></param>
		/// <returns>Task of ApiResponse (string)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<string>> JobUpdateStatusAsyncWithHttpInfo (string filter, string status)
		{
			// verify the required parameter 'filter' is set
			if (filter == null)
				throw new ApiException(400, "Missing required parameter 'filter' when calling JobApi->JobUpdateStatus");
			// verify the required parameter 'status' is set
			if (status == null)
				throw new ApiException(400, "Missing required parameter 'status' when calling JobApi->JobUpdateStatus");

			var localVarPath = "/jobs/updateStatus";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (filter != null) localVarFormParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // form parameter
			if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobUpdateStatus", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<string>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
			
		}

		/// <summary>
		/// get job data for validation 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Object</returns>
		public Object JobValidation (string id = null, string filter = null, string extractorType = null)
		{
			 ApiResponse<Object> localVarResponse = JobValidationWithHttpInfo(id, filter, extractorType);
			 return localVarResponse.Data;
		}

		/// <summary>
		/// get job data for validation 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>ApiResponse of Object</returns>
		public ApiResponse< Object > JobValidationWithHttpInfo (string id = null, string filter = null, string extractorType = null)
		{

			var localVarPath = "/jobs/validation";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
			if (extractorType != null) localVarQueryParams.Add("extractorType", Configuration.ApiClient.ParameterToString(extractorType)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidation", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

		/// <summary>
		/// get job data for validation 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Task of Object</returns>
		public async System.Threading.Tasks.Task<Object> JobValidationAsync (string id = null, string filter = null, string extractorType = null)
		{
			 ApiResponse<Object> localVarResponse = await JobValidationAsyncWithHttpInfo(id, filter, extractorType);
			 return localVarResponse.Data;

		}

		/// <summary>
		/// get job data for validation 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="id"> (optional)</param>
		/// <param name="filter"> (optional)</param>
		/// <param name="extractorType"> (optional)</param>
		/// <returns>Task of ApiResponse (Object)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> JobValidationAsyncWithHttpInfo (string id = null, string filter = null, string extractorType = null)
		{

			var localVarPath = "/jobs/validation";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json", 
				"application/x-www-form-urlencoded", 
				"application/xml", 
				"text/xml"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json", 
				"application/xml", 
				"text/xml", 
				"application/javascript", 
				"text/javascript"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			// set "format" to json by default
			// e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
			localVarPathParams.Add("format", "json");
			if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
			if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
			if (extractorType != null) localVarQueryParams.Add("extractorType", Configuration.ApiClient.ParameterToString(extractorType)); // query parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int) localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("JobValidation", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
			
		}

	}
}

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using ComprenoTesting.ComprenoHelper.Models;
using IO.Swagger.Api;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace ComprenoTesting.ComprenoHelper
{
	/// <summary>
	/// Class for all methods not available through the autogenerated API
	/// </summary>
	public class Helper
	{
		protected Uri Uri { get; }
		protected string token { get; set; }

		private JobApi jobApi { get; set; }

		public Helper(string url)
		{
			Uri = new Uri(url);
		}

		///
		/// API calls
		///

		public Credentials Login(string email, string password)
		{
			var credentialsDictionary = new Dictionary<string, string>
			{
				{"username", email},
				{"password", password}
			};

			var response = Post(credentialsDictionary, "nextapi/users/login");
			var credentials = (Credentials)Deserialize(response, typeof(Models.Credentials));
			token = credentials.id;

			var apiClient = new ApiClient(Uri + "/nextapi");
			var authorization = new Dictionary<string, string> { { "Authorization", token } };
			var configuration = new Configuration(
				apiClient: apiClient,
				defaultHeader: authorization);
			jobApi = new JobApi(configuration);

			return credentials;
		}

		public Job PostDocument(string path, string projectId)
		{
			var formData = new MultipartFormDataContent()
			{
				{new StringContent(projectId), "projectId"},
				{new StringContent("API upload"), "location"},
				{new StreamContent(File.Open(path, FileMode.Open)), "file", Path.GetFileName(path)}
			};

			var response = Post(formData, $"nextapi/jobs?access_token={token}");
			var job = (Job)Deserialize(response, typeof(Job));
			return job;
		}

		public List<Project> GetProjectsByFilter(string filter)
		{
			var query = new Dictionary<string, string>
			{
				{"access_token", token },
				{"filter", filter}
			};

			var response = Get(query, "nextapi/projects");
			var projects = (List<Project>)Deserialize(response, typeof(List<Project>));
			return projects;
		}

		public List<Markup> GetMarkupsByFilter(string jobId)
		{
			var query = new Dictionary<string, string>
			{
				{"access_token", token },
				{"filter[where][jobId]", jobId}
			};

			var response = Get(query, "nextapi/markups");
			var markups = (List<Markup>)Deserialize(response, typeof(List<Markup>));
			return markups;
		}

		public string GetAJobId(string stage = "All", string projectId = null)
		{
			string filter = $"{{\"skip\":0,\"limit\":1,\"all\":false,\"include\":[],\"exclude\":[],\"docType\":\"MSA_Standard_ST\",\"sort\":{{}},\"stage\":\"{stage}\",\"levels\":[2,1],\"projectIds\":[\"{projectId}\"]}}";
			List<Document> documents = ((JObject)jobApi.JobReport(filter)).SelectToken("documents").ToObject<List<Document>>();
			var document = documents[0];
			var jobId = document.Id.ToString();
			return jobId;
		}

		public Job PutJobStatus(string id, string status, string stepName, string stepType)
		{
			var values = new Dictionary<string, string> {
				{"access_token", token }
			};

			var json = new JObject(
				new JProperty("status", status),
				new JProperty("step",
					new JObject(
						new JProperty("name", stepName),
						new JProperty("type", stepType)
					)
				)
			);

			var content = json.ToString();
			var response = Put(values, content, $"nextapi/jobs/{id}");

			return (Job)Deserialize(response, typeof(Job));
		}

		public void PostJobUpdateExtractions(JObject documents)
		{
			using (var client = new HttpClient())
			{
				Post(documents, "nextapi/jobs/updateExtractions");
			}
		}

		///
		/// Private methods
		///

		protected string Put(Dictionary<string, string> values, string content, string path)
		{
			using (var client = new HttpClient())
			{
				NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
				foreach (KeyValuePair<string, string> entry in values)
				{
					queryString.Add(entry.Key, entry.Value);
				}

				var uriBuilder = new UriBuilder(Uri);
				uriBuilder.Path = path;
				uriBuilder.Query = queryString.ToString();
				return client.PutAsync(
					uriBuilder.Uri,
					new StringContent(content)
				).Result.Content.ReadAsStringAsync().Result;
			}
		}

		//
		// HTTP methods
		//

		protected string Get(Dictionary<string, string> values, string path = "")
		{
			using (var client = new HttpClient())
			{
				NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
				foreach(KeyValuePair<string, string> entry in values)
				{
					queryString.Add(entry.Key, entry.Value);
				}

				var uriBuilder = new UriBuilder(Uri);
				uriBuilder.Path = path;
				uriBuilder.Query = queryString.ToString();

				return client.GetAsync(uriBuilder.Uri).Result.Content.ReadAsStringAsync().Result;
			}
		}

		protected string Post(Dictionary<string, string> values, string path = "")
		{
			using (var client = new HttpClient())
			{
				var content = new StringContent(JsonConvert.SerializeObject(values), Encoding.UTF8, "application/json");
				return client.PostAsync(new Uri(Uri, path), content).Result.Content.ReadAsStringAsync().Result;
			}
		}

		protected string Post(JObject values, string path = "")
		{
			using (var client = new HttpClient())
			{
				NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
				queryString.Add("access_token", token);

				var uriBuilder = new UriBuilder(Uri);
				uriBuilder.Path = path;
				uriBuilder.Query = queryString.ToString();

				var content = new StringContent(JsonConvert.SerializeObject(values), Encoding.UTF8, "application/json");
				return client.PostAsync(uriBuilder.Uri, content).Result.Content.ReadAsStringAsync().Result;
			}
		}

		protected string Post(MultipartFormDataContent content, string path = "")
		{
			using (var client = new HttpClient())
			{
				return client.PostAsync(new Uri(Uri, path), content).Result.Content.ReadAsStringAsync().Result;
			}
		}

		public static object Deserialize(string content, Type type, IList<Parameter> headers = null)
		{
			if (type == typeof(Object)) // return an object
			{
				return content;
			}

			if (type == typeof(Stream))
			{
				var filePath = Path.GetTempPath();

				var fileName = filePath + Guid.NewGuid();
				if (headers != null)
				{
					var regex = new Regex(@"Content-Disposition:.*filename=['""]?([^'""\s]+)['""]?$");
					var match = regex.Match(headers.ToString());
					if (match.Success)
						fileName = filePath + match.Value.Replace("\"", "").Replace("'", "");
				}
				File.WriteAllText(fileName, content);
				return new FileStream(fileName, FileMode.Open);
			}

			if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
			{
				return DateTime.Parse(content, null, System.Globalization.DateTimeStyles.RoundtripKind);
			}

			if (type == typeof(String) || type.Name.StartsWith("System.Nullable")) // return primitive type
			{
				return ConvertType(content, type);
			}

			// at this point, it must be a model (json)
			try
			{
				return JsonConvert.DeserializeObject(content, type);
			}
			catch (IOException e)
			{
				throw new Exception(e.Message);
			}
		}
		/// <summary>
		/// Dynamically cast the object into target type.
		/// Ref: http://stackoverflow.com/questions/4925718/c-dynamic-runtime-cast
		/// </summary>
		/// <param name="source">Object to be casted</param>
		/// <param name="dest">Target type</param>
		/// <returns>Casted object</returns>
		private static Object ConvertType(Object source, Type dest)
		{
			return Convert.ChangeType(source, dest);
		}
	}
}